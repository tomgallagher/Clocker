{"version":3,"sources":["images/chromium.webp","stores/settingsStore.js","stores/autosave.js","utils/strings.js","database/database.js","utils/chromeFunctions.js","utils/mobxFunctions.js","utils/arrayFunctions.js","utils/browserDetect.js","stores/jobStore.js","contexts/storesContext.js","hooks/useStores.js","components/navigation.js","components/sidebarItem.js","components/settings/sidebar/loadCustomList.js","components/settings/sidebar/saveCustomList.js","hooks/useWindowResize.js","components/placeHolder.js","components/lists/virtualGridCell.js","components/lists/virtualGrid.js","components/results/sidebar/errorReport.js","components/results/sidebar/pageDetail.js","components/sidebarContent.js","components/home/banner.js","components/home/cards.js","pages/home.js","components/pageTitle.js","components/gridItem.js","components/settings/settingsLayout.js","components/settings/bandwidth.js","components/settings/latency.js","components/settings/websiteSelector.js","components/settings/pageIterations.js","components/settings/withCache.js","components/settings/withServiceWorker.js","components/settings/screenshot.js","pages/settings.js","components/results/resultsLayout.js","components/results/headerLatency.js","components/results/dataUsage.js","components/results/progress.js","contexts/browserContext.js","hooks/useBrowser.js","components/tables/table.js","components/results/activePageTable.js","components/results/activeMetricsTable.js","components/lists/virtualListRow.js","components/lists/virtualList.js","components/results/consoleList.js","components/results/timings.js","components/charts/loadChart.js","components/charts/requestChart.js","components/results/actionButtons.js","pages/results.js","components/history/historyLayout.js","components/history/editableDisplayTableCell.js","components/history/jobsTable.js","components/history/displayPageTable.js","components/history/displayMetricsTable.js","components/history/historyTitle.js","pages/history.js","App.js","index.js"],"names":["module","exports","Settings","this","websites","bandwidth","latency","pageIterations","withCache","withServiceWorker","screenshotWidth","customUrlLists","pageDisplayIndex","isPaused","sidebar","showSidebar","themeBackground","settingsLayouts","resultsLayouts","historyLayouts","load","storeItem","save","delay","firstRun","autorun","readyToSave","toJS","json","JSON","stringify","console","log","constructor","name","autosave","bind","localData","window","localStorage","getItem","parsedData","parse","extendObservable","setItem","filter","Boolean","map","item","URL","trim","urlObject","psl","hostname","domain","favicon","url","href","selected","settings","Object","entries","key","value","join","date","Date","year","getFullYear","month","getMonth","padStart","day","getDate","getDateString","decorate","observable","parsedWebsites","computed","toString","localdb","Dexie","version","stores","jobs","SendChromeMessage","messageObject","chrome","runtime","sendMessage","ChromeMessageObservable","fromEventPattern","handler","wrapper","request","sender","sendResponse","options","async","onMessage","addListener","removeListener","pipe","share","createMobxMessageListener","currentSubscription","commandFilter","requestProperty","initialState","fromResource","sink","messageObj","command","subscribe","unsubscribe","RoundedAverage","acc","index","array","calculatedValue","length","Math","round","RoundedAverageMegaBytes","megabytesTotal","Number","EPSILON","TotalMegaBytes","BrowserDetect","parsed","Bowser","navigator","userAgent","browser","os","os_version","versionName","platform","type","JobStore","loadJobsFromStorage","isLoading","table","toArray","then","forEach","job","observableJob","Job","runInAction","push","catch","error","isLoadError","createJob","browserJob","assign","browserName","operatingSystem","operatingSystemVersion","newJob","saveableJob","add","id","database_id","payload","resetListeners","dispose","pageEntries","activeIndex","displayIndex","placeholderJob","placeholderPage","Page","current","consoleMessages","activeJob","page","pages","reaction","partialJob","updatedtAt","pagesProcessed","dclAverage","completeAverage","dataUsageAverage","headerTimingsAverage","partialSettings","activePageIndex","jobTableData","defaults","unique_id","uuidv4","createdAt","now","imageRequestsAverage","fontRequestsAverage","mediaRequestsAverage","cssRequestsAverage","scriptRequestsAverage","imageLoadTotal","mediaLoadTotal","fontLoadTotal","cssLoadTotal","scriptLoadTotal","minorResources","htmlLoadAverage","htmlRequestsAverage","xhrLoadAverage","xhrRequestsAverage","fetchLoadAverage","fetchRequestsAverage","websocketLoadAverage","websocketRequestsAverage","errorArray","errorCount","opts","keys","prop","reduce","imageLoadAverage","mediaLoadAverage","fontLoadAverage","cssLoadAverage","scriptLoadAverage","updatedAt","update","jobId","screenshot","metricsDocumentsAverage","metricsResourcesAverage","metricsFramesAverage","metricsAdvertisingFramesAverage","metricsUsedHeapAverage","metricsTotalHeapAverage","datasets","data","backgroundColor","ColorPalette","deepsea","limestone","sand","mushroom","fawn","label","labels","pageTableData","pageMetricsTableData","resourceLoadData","storesContext","React","createContext","useStores","useContext","Navigation","useState","active","setActive","history","useHistory","handleItemClick","e","Menu","stackable","Item","onClick","src","alt","SidebarItem","props","Container","fluid","style","height","Segment","textAlign","colors","background","borderRadius","Header","as","content","title","display","flexDirection","paddingLeft","paddingRight","scroll","children","LoadCustomList","observer","text","Form","Field","Dropdown","selection","placeholder","onChange","SaveCustomList","nameInput","setNameInput","nameInputError","setNameInputError","formSuccess","setFormSuccess","Input","event","target","onKeyUp","inputName","toLocaleString","weekday","hour","minute","replace","split","customList","pointing","Message","success","header","useWindowSize","size","setSize","useLayoutEffect","updateSize","innerWidth","innerHeight","addEventListener","removeEventListener","PlaceHolder","newStyle","customStyle","icon","Icon","iconName","color","iconColour","message","defaultProps","VirtualGridCell","memo","columnIndex","rowIndex","VirtualGridContext","windowWidth","root","useRef","getBoundingClientRect","ref","className","VirtualGrid","gridRef","rowData","columnWidths","sizeMap","useCallback","getSize","onResize","resetAfterIndices","Provider","width","columnCount","columnWidth","floor","rowCount","rowHeight","itemData","onScroll","ErrorReport","panes","errorItem","createRef","menuItem","render","Tab","Pane","values","PageDetail","jobDisplayIndex","activePage","stormysky","yAxisID","eggshell","Image","responsive","tooltips","mode","intersect","scales","yAxes","position","gridLines","drawOnChartArea","ticks","precision","animation","animateScale","Statistic","SidebarContent","rel","marginBlockStart","paddingInlineStart","paddingBottom","Banner","showMessage","setShowMessage","vertical","padding","Grid","container","Row","Column","fontFamily","fontSize","Divider","hidden","Button","floated","circular","bordered","Chromium","Cards","paddingTop","divided","verticalAlign","columns","Reveal","animated","instant","Content","visible","Home","PageTitle","dividing","subheader","subtitle","GridItem","DefaultSettingsLayouts","lg","i","w","h","x","y","isBounded","md","sm","xs","xxs","Bandwidth","sliderSettings","start","min","max","step","Popup","trigger","basic","mouseEnterDelay","Latency","euroSource","usSource","urlRegex","WebsiteSelector","urlInput","setUrlInput","urlInputError","setUrlInputError","processed","Label","avatar","centered","onError","onerror","useEffect","scrollToItem","handleRegionClick","inputUrl","test","Group","widths","Or","PageIterations","WithCache","checked","setChecked","Checkbox","toggle","WithServiceWorker","Screenshot","levelsMap","Map","set","get","ResponsiveGridLayout","WidthProvider","Responsive","SettingsPage","draggableHandle","layouts","breakpoints","cols","margin","containerPadding","onLayoutChange","currentLayout","allLayouts","DefaultResultsLayouts","HeaderLatency","DataUsage","ProgressBar","pageCount","pageTarget","Progress","percent","autoSuccess","progress","browserContext","Browser","useBrowser","SemanticTable","headers","dataset","rowClick","mostRecent","filename","useMemo","csvHeaders","accessor","useTable","pageIndex","autoResetPage","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","visibleColumns","prepareRow","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","setPageSize","state","pageSize","Table","headerGroup","getHeaderGroupProps","column","HeaderCell","getHeaderProps","getSortByToggleProps","sorted","isSorted","isSortedDesc","Body","row","getRowProps","original","cells","cell","Cell","getCellProps","Footer","colSpan","pagination","disabled","Select","upward","paginationOptions","celled","collapsing","compact","definition","fixed","inverted","padded","singleLine","sortable","unstackable","striped","structured","ActivePageTable","selectable","findIndex","ActiveMetricsTable","VirtualListRow","styleErrorText","VirtualListContext","includes","dangerouslySetInnerHTML","__html","areEqual","VirtualList","listRef","resetAfterIndex","itemCount","itemSize","containerRef","ConsoleList","Timings","Step","Title","Description","LoadChart","cutoutPercentage","enabled","callbacks","datasetIndex","animateRotate","legend","RequestChart","requestData","ActionButtons","handleButtonClick","_","setTimeout","marginRight","positive","negative","Results","DefaultHistoryLayouts","EditableDisplayNameTableCell","jobIndex","stopPropagation","JobsTable","CheckboxCell","defaultChecked","DisplayPageTable","displayJob","DisplayMetricsTable","HistoryTitle","subTitle","History","App","Sidebar","Pushable","onHide","direction","Pusher","path","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfff41f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chromium.2f638296.webp\";","import { observable, extendObservable, decorate, computed } from 'mobx';\r\nimport psl from 'psl';\r\nimport { getDateString } from './../utils/strings';\r\nimport { autosave } from './autosave';\r\n\r\nexport class Settings {\r\n    constructor() {\r\n        //test settings\r\n        this.websites = [];\r\n        this.bandwidth = 1.5;\r\n        this.latency = 40;\r\n        this.pageIterations = 2;\r\n        this.withCache = false;\r\n        this.withServiceWorker = false;\r\n        this.screenshotWidth = 600;\r\n        //UI settings\r\n        this.customUrlLists = [];\r\n        this.pageDisplayIndex = null;\r\n        this.isPaused = false;\r\n        this.sidebar = 'default';\r\n        this.showSidebar = false;\r\n        this.themeBackground = null;\r\n        this.settingsLayouts = {};\r\n        this.resultsLayouts = {};\r\n        this.historyLayouts = {};\r\n        //load the data from local storage if available\r\n        this.load();\r\n        //add the autosave function that will persist the data with a small delay\r\n        autosave(this, this.save.bind(this), 500);\r\n    }\r\n\r\n    load() {\r\n        //try to get the time data from local storage\r\n        const localData = window.localStorage.getItem('settings_data');\r\n        //if local data then we need to make sure we don't reimport the UI state data\r\n        if (localData) {\r\n            //get the object\r\n            let parsedData = JSON.parse(localData);\r\n            //then adjust and extend\r\n            parsedData.pageDisplayIndex = null;\r\n            parsedData.isPaused = false;\r\n            parsedData.sidebar = 'default';\r\n            parsedData.showSidebar = false;\r\n            //use extendObservable to add observable properties to the existing target objects, much like object assign.\r\n            extendObservable(this, parsedData);\r\n        }\r\n    }\r\n\r\n    save(json) {\r\n        window.localStorage.setItem('settings_data', json);\r\n    }\r\n\r\n    get parsedWebsites() {\r\n        return this.websites\r\n            .filter(Boolean)\r\n            .map((item) => new window.URL(item.trim()))\r\n            .map((urlObject) => ({\r\n                name: psl.parse(urlObject.hostname).domain,\r\n                favicon: `https://icons.duckduckgo.com/ip3/${urlObject.hostname}.ico`,\r\n                url: urlObject.href,\r\n            }));\r\n    }\r\n\r\n    get toString() {\r\n        const selected = {\r\n            bandwidth: this.bandwidth,\r\n            latency: this.latency,\r\n            pageIterations: this.pageIterations,\r\n            withCache: this.withCache,\r\n        };\r\n        const settings = Object.entries(selected)\r\n            .map(([key, value]) => `${key}-${value}`)\r\n            .join('_');\r\n        return `${getDateString()}_${settings}`;\r\n    }\r\n}\r\n\r\n//then add the decorations to make the relevant features of the list observable\r\ndecorate(Settings, {\r\n    //test settings\r\n    websites: observable,\r\n    bandwidth: observable,\r\n    latency: observable,\r\n    pageIterations: observable,\r\n    withCache: observable,\r\n    withServiceWorker: observable,\r\n    screenshotWidth: observable,\r\n    //UI settings\r\n    customUrlLists: observable,\r\n    pageDisplayIndex: observable,\r\n    isPaused: observable,\r\n    sidebar: observable,\r\n    showSidebar: observable,\r\n    settingsLayouts: observable,\r\n    resultsLayouts: observable,\r\n    historyLayouts: observable,\r\n    parsedWebsites: computed,\r\n    toString: computed,\r\n});\r\n","import { autorun, toJS } from 'mobx';\r\n\r\nexport const autosave = (storeItem, save, delay) => {\r\n    //no point in saving on the first run\r\n    let firstRun = true;\r\n    // This code will run every time any observable property on the store is updated.\r\n    // As a rule of thumb: use autorun if you have a function that should run automatically but that doesn't result in a new value.\r\n    autorun(\r\n        () => {\r\n            //firs we need to create the JS, rather than the proxy version which is observed\r\n            const readyToSave = toJS(storeItem);\r\n            //get the data as JSON, using the toJS function which converts an (observable) object to a javascript structure\r\n            const json = JSON.stringify(readyToSave);\r\n            //then if it's not the first run and we are not testing, report the data saving and use the passed function to save\r\n            if (!firstRun) {\r\n                console.log(`AutoSaving ${storeItem.constructor.name} Data`);\r\n                //use the passed save function to return the stringified json and the ready to save version of the store item\r\n                save(json, readyToSave);\r\n            }\r\n            //remember that we have made a save\r\n            firstRun = false;\r\n            //add the delay which will always save the last emission, like debounce\r\n        },\r\n        { delay: delay }\r\n    );\r\n};\r\n","export const getDateString = () => {\r\n    const date = new Date();\r\n    const year = date.getFullYear();\r\n    const month = `${date.getMonth() + 1}`.padStart(2, '0');\r\n    const day = `${date.getDate()}`.padStart(2, '0');\r\n    return `${year}${month}${day}`;\r\n};\r\n","import Dexie from 'dexie';\r\n\r\nconst localdb = new Dexie('jobDatabase');\r\n//set up the database with the required fields - this is where we add fields in a second version so we can update users' databases\r\nlocaldb.version(1).stores({\r\n    jobs: '++id,name,browserName,operatingSystem,operatingSystemVersion,unique_id,database_id,createdAt,updatedtAt',\r\n});\r\n\r\nexport default localdb;\r\n","/* global chrome */\r\nimport { fromEventPattern } from 'rxjs';\r\nimport { share } from 'rxjs/operators';\r\n\r\nexport const SendChromeMessage = (messageObject) => {\r\n    chrome.runtime.sendMessage(messageObject);\r\n};\r\nexport const ChromeMessageObservable = fromEventPattern(\r\n    (handler) => {\r\n        const wrapper = (request, sender, sendResponse) => {\r\n            //note the async is set to true by default to allow for slow JSON responses in the createDataResultStream combineLatest\r\n            const options = { async: false, request, sender, sendResponse };\r\n            handler(options);\r\n            return options.async;\r\n        };\r\n        console.log(\r\n            `Chrome Functions: SUBSCRIBED to SHARED Sync Messaging Observer Instance`\r\n        );\r\n        chrome.runtime.onMessage.addListener(wrapper);\r\n        return wrapper;\r\n    },\r\n    (handler, wrapper) => {\r\n        console.log(\r\n            `Chrome Functions: UNSUBSCRIBED from SHARED Sync Messaging Observer Instance`\r\n        );\r\n        chrome.runtime.onMessage.removeListener(wrapper);\r\n    }\r\n).pipe(share());\r\n","import { fromResource } from 'mobx-utils';\r\nimport { filter } from 'rxjs/operators';\r\nimport { ChromeMessageObservable } from './../utils/chromeFunctions';\r\n\r\n//this links the rxjs chrome message port to any mobx store that calls it\r\nexport const createMobxMessageListener = ({\r\n    //the command filter allows us to filter the messages received by the mobx store\r\n    commandFilter,\r\n    //the request propert allows us to return only the request payload, or whatever property is called\r\n    requestProperty,\r\n    //then we have an initial state. which should be set to an empty string or object depending on what we want to receive\r\n    initialState,\r\n}) => {\r\n    //define the current subscription outside the fromResource scope so it can be accessed by the subscribe and unsubscribe functions\r\n    let currentSubscription;\r\n    //return an observable whose current state can be inspected using .current(),\r\n    return fromResource(\r\n        (sink) => {\r\n            console.log('Mobx Functions: SUBSCRIBED to message observer');\r\n            // sink the current state - whatever is passed to sink will be returned by current()\r\n            sink(initialState);\r\n            //set subscription resource source to our chrome messaging observable\r\n            currentSubscription = ChromeMessageObservable.pipe(\r\n                //log to console for debugging\r\n                //tap((val) => console.log(val)),\r\n                //filter the messages according to the command filter\r\n                filter((messageObj) => messageObj.request.command === commandFilter)\r\n            ).subscribe((messageObj) => {\r\n                // subscribe to the messaging observer, invoke the sink callback whenever new data arrives, using the request property value\r\n                sink(messageObj.request[requestProperty]);\r\n            });\r\n        },\r\n        () => {\r\n            console.log('Mobx Functions: UNSUBSCRIBED from message observer');\r\n            // the user observable is not in use at the moment, unsubscribe (for now)\r\n            currentSubscription.unsubscribe();\r\n        }\r\n    );\r\n};\r\n","export const RoundedAverage = (acc, value, index, array) => {\r\n    //first we calculate the value\r\n    var calculatedValue = acc + value;\r\n    //then we see if we have hit the end of the array\r\n    if (index === array.length - 1) {\r\n        //if we have then we return the rounded value\r\n        return Math.round(calculatedValue / array.length);\r\n    }\r\n    //otherwise we are still interacting and we just return the running total\r\n    return calculatedValue;\r\n};\r\nexport const RoundedAverageMegaBytes = (acc, value, index, array) => {\r\n    //first we calculate the value\r\n    var calculatedValue = acc + value;\r\n    //then we see if we have hit the end of the array\r\n    if (index === array.length - 1) {\r\n        //if we have then we get the rounded value, in bytes\r\n        var total = Math.round(calculatedValue / array.length);\r\n        //then we need to convert that to megabytes\r\n        var megabytesTotal = total / 1048576;\r\n        //then we need to have that to two decimal places\r\n        return Math.round((megabytesTotal + Number.EPSILON) * 100) / 100;\r\n    }\r\n    //otherwise we are still interating and we just return the running total\r\n    return calculatedValue;\r\n};\r\nexport const TotalMegaBytes = (acc, value, index, array) => {\r\n    //first we calculate the value\r\n    var calculatedValue = acc + value;\r\n    //then we see if we have hit the end of the array\r\n    if (index === array.length - 1) {\r\n        //then we need to convert that to megabytes\r\n        var megabytesTotal = calculatedValue / 1048576;\r\n        //then we need to have that to two decimal places\r\n        return Math.round((megabytesTotal + Number.EPSILON) * 100) / 100;\r\n    }\r\n    //otherwise we are still interating and we just return the running total\r\n    return calculatedValue;\r\n};\r\n\r\n//SORT FUNCTION FOR OBJECTS WHERE YOU NEED TO PRIORITISE CERTAIN FIELDS\r\n//Call function like so\r\n/*\r\n    const sorted = testArray.sort((a, b) =>\r\n        sortWithFieldPrecedence(a, b, [\"age\", \"lastName\", \"status\"])\r\n    );\r\n*/\r\n//where the array contains the fields and the order you want to sort\r\n\r\nexport const sortWithFieldPrecedence = (a, b, precedenceArray) => {\r\n    //map precedence array strings to object with type\r\n    const precedences = precedenceArray.map(\r\n        //this enables us to examine the properties of a and b\r\n        (str) => ({ key: str, type: typeof a[str] })\r\n    );\r\n    //error handler in cases where the precedence array fields not present in either of objects to sort\r\n    if (precedences.some((item) => !Object.keys(a).includes(item.key) || !Object.keys(b).includes(item.key))) {\r\n        console.log('Precedence fields unmatched in array object property keys');\r\n        return 0;\r\n    }\r\n    //in situations of equality of all fields we return 0, so no sorting\r\n    if (!precedences.some((item) => a[item.key] !== b[item.key])) {\r\n        console.log('Matched by all fields');\r\n        return 0;\r\n    }\r\n    //otherwise we need to test each item in the precedence array\r\n    //we use array reduce to return the sorting indicator for all precedences\r\n    return precedences.reduce((accumulator, currentValue, index) => {\r\n        //at the start we have no sort signal and also in the loop when equality\r\n        if (accumulator === 0) {\r\n            //we need a report on sorting that has occurred beyond the first criterion\r\n            if (index > 0) {\r\n                const objA = JSON.stringify(a);\r\n                const objB = JSON.stringify(b);\r\n                console.log(`Calculating Precedence at layer ${index}: ${currentValue.key}`);\r\n                console.log(objA);\r\n                console.log(objB);\r\n            }\r\n            //otherwise we need to vary according to the type of sort\r\n            switch (currentValue.type) {\r\n                case 'string':\r\n                    const aString = a[currentValue.key].toLowerCase();\r\n                    const bString = b[currentValue.key].toLowerCase();\r\n                    //To see whether a string is greater than another,\r\n                    //JavaScript uses the so-called “dictionary” or “lexicographical” order.\r\n                    if (aString < bString) accumulator = -1;\r\n                    if (aString > bString) accumulator = 1;\r\n                    if (aString === bString) accumulator = 0;\r\n                    break;\r\n                case 'number':\r\n                    //with numbers we can just return the first minus the second\r\n                    accumulator = a[currentValue.key] - b[currentValue.key];\r\n                    break;\r\n                default:\r\n                    console.log('Unrecognised key type');\r\n            }\r\n        }\r\n        return accumulator;\r\n    }, 0);\r\n};\r\n","import Bowser from 'bowser';\r\n\r\nexport class BrowserDetect {\r\n    constructor() {\r\n        const parsed = Bowser.parse(window.navigator.userAgent);\r\n        this.name = parsed.browser.name;\r\n        this.version = parsed.browser.version;\r\n        this.os = parsed.os.name;\r\n        this.os_version = parsed.os.versionName;\r\n        this.platform = parsed.platform.type;\r\n    }\r\n}\r\n","import { observable, autorun, reaction, decorate, computed, toJS, runInAction } from 'mobx';\r\nimport localdb from './../database/database';\r\nimport { SendChromeMessage } from './../utils/chromeFunctions';\r\nimport { createMobxMessageListener } from './../utils/mobxFunctions';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { RoundedAverage, RoundedAverageMegaBytes, TotalMegaBytes } from './../utils/arrayFunctions';\r\nimport { BrowserDetect } from '../utils/browserDetect';\r\nimport ColorPalette from './../components/charts/colorPalette.json';\r\n\r\nexport class JobStore {\r\n    constructor() {\r\n        //we have the array of jobs in the job store\r\n        this.jobs = [];\r\n        //we have the activeIndex for jobs currently running / most recent job\r\n        this.activeIndex = 0;\r\n        //we have the display index for past jobs that need to be displayed\r\n        this.displayIndex = null;\r\n        //the basic params of the platform we are working on\r\n        this.browser = new BrowserDetect();\r\n        //then we have the placeholders so the UI displays with no data\r\n        this.placeholderJob = new Job({});\r\n        this.placeholderPage = new Page({});\r\n        //then the loading indicators for when we get the data from the database\r\n        this.isLoading = false;\r\n        this.isLoadError = false;\r\n        //more complex observables to link the rxjs messaging port from chrome into mobx store\r\n        //pass command filter, request property to return and default value\r\n        this.console = createMobxMessageListener({\r\n            commandFilter: 'incomingConsoleMessage',\r\n            requestProperty: 'message',\r\n            initialState: null,\r\n        });\r\n        this.pageEntries = createMobxMessageListener({\r\n            commandFilter: 'incomingPageData',\r\n            requestProperty: 'payload',\r\n            initialState: null,\r\n        });\r\n\r\n        //then we use autorun to monitor incoming console messages and then update the UI accordingly\r\n        autorun(() => {\r\n            //no need to activate on null value\r\n            if (this.console.current()) {\r\n                //then see if we have an active job or placeholder\r\n                const activeJob = this.jobs.length ? this.jobs[this.activeIndex] : this.placeholderJob;\r\n                // push the new message into the active job console messages array every time we receive the message\r\n                activeJob.consoleMessages.push(this.console.current());\r\n            }\r\n        });\r\n\r\n        //same with page data coming in - a new page needs to be added to the active job\r\n        autorun(() => {\r\n            //no need to activate on null value\r\n            if (this.pageEntries.current()) {\r\n                //then see if we have an active job or placeholder\r\n                const activeJob = this.jobs.length ? this.jobs[this.activeIndex] : this.placeholderJob;\r\n                //make sure we have a page in the UI format, where we only care about the stats, not the iterations array, settings, etc. used by background.js\r\n                const page = new Page(this.pageEntries.current());\r\n                // push the new data into the active job pages array every time we receive the message\r\n                activeJob.pages.push(page);\r\n            }\r\n        });\r\n\r\n        //then we are always looking at the jobs length to see if we have a new job and update the active index accordingly\r\n        reaction(\r\n            () => this.jobs.length,\r\n            () => {\r\n                console.log('reaction: new job, updating activeIndex');\r\n                this.activeIndex = this.jobs.length - 1;\r\n            }\r\n        );\r\n\r\n        //then we need to load the existing jobs in local storage from the database\r\n        this.loadJobsFromStorage();\r\n    }\r\n\r\n    //load guidelines from local storage\r\n    loadJobsFromStorage = () => {\r\n        //mark the loading process as started\r\n        this.isLoading = true;\r\n        //open the correct table\r\n        localdb\r\n            .table('jobs')\r\n            //then get the whole collection as an array\r\n            .toArray()\r\n            //then once we have the array we need to create all the jobs\r\n            .then((jobs) => {\r\n                //then we just need to push each job into the observable list\r\n                jobs.forEach((job) => {\r\n                    //this is a bit more complex as we need to create an observable from the plain JS object that is stored\r\n                    const observableJob = new Job(job);\r\n                    //then push to observable list\r\n                    runInAction(() => this.jobs.push(observableJob));\r\n                });\r\n                //then say we have finished loading\r\n                this.isLoading = false;\r\n                //then report\r\n                console.log(`Loaded ${jobs.length} jobs from storage`);\r\n            })\r\n            .catch((error) => {\r\n                console.error(error);\r\n                this.isLoadError = true;\r\n            });\r\n    };\r\n\r\n    createJob = (job) => {\r\n        //add the browser details to the job\r\n        const browserJob = Object.assign({}, job, {\r\n            browserName: this.browser.name,\r\n            operatingSystem: this.browser.os,\r\n            operatingSystemVersion: this.browser.os_version,\r\n        });\r\n        //on button click in banner.js front page we need to create a new job, with the browser details as options\r\n        const newJob = new Job(browserJob);\r\n        //then create a saveable version of the job\r\n        const saveableJob = toJS(newJob);\r\n        //then save the job to storage in order to get the db id attached to the observed job\r\n        localdb\r\n            .table('jobs')\r\n            .add(saveableJob)\r\n            .then((id) => {\r\n                //the id is the only thing that comes back\r\n                newJob.database_id = id;\r\n                //then push the job into our local observable jobs list, which will update the active index\r\n                this.jobs.push(newJob);\r\n                //then report the id of the project\r\n                console.log(`Storage has created local version of Job with ID: ${newJob.database_id}`);\r\n                //then send the job to the background page for processing\r\n                SendChromeMessage({\r\n                    command: 'startTest',\r\n                    payload: toJS(newJob),\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                console.log(saveableJob);\r\n            });\r\n    };\r\n\r\n    resetListeners = () => {\r\n        this.console.dispose();\r\n        this.pageEntries.dispose();\r\n        this.console = createMobxMessageListener({\r\n            commandFilter: 'incomingConsoleMessage',\r\n            requestProperty: 'message',\r\n            initialState: null,\r\n        });\r\n        this.pageEntries = createMobxMessageListener({\r\n            commandFilter: 'incomingPageData',\r\n            requestProperty: 'payload',\r\n            initialState: null,\r\n        });\r\n    };\r\n\r\n    get jobTableData() {\r\n        return this.jobs.map((job) => {\r\n            //we have no need for all the fields in the table data\r\n            const partialJob = {\r\n                id: job.id,\r\n                name: job.name,\r\n                updatedtAt: job.updatedtAt,\r\n                browserName: job.browserName,\r\n                operatingSystem: job.operatingSystem,\r\n                operatingSystemVersion: job.operatingSystemVersion,\r\n                bandwidth: job.bandwidth,\r\n                pageIterations: job.pageIterations,\r\n                latency: job.latency,\r\n                withCache: job.withCache,\r\n                withServiceWorker: job.withServiceWorker,\r\n                pagesProcessed: job.pages.length,\r\n                dclAverage: job.dclAverage,\r\n                completeAverage: job.completeAverage,\r\n                dataUsageAverage: job.dataUsageAverage,\r\n                headerTimingsAverage: job.headerTimingsAverage,\r\n            };\r\n            //we have no need for the following settings\r\n            const { activePageIndex, screenshotWidth, websites, ...partialSettings } = job.settings;\r\n            //however we do need the settings extracted from the job settings object\r\n            const expandedPartialJob = Object.assign({}, partialJob, partialSettings);\r\n            //then we return the partial job\r\n            return expandedPartialJob;\r\n        });\r\n    }\r\n}\r\n\r\n//then add the decorations to make the relevant features of the list observable\r\ndecorate(JobStore, {\r\n    jobs: observable,\r\n    activeIndex: observable,\r\n    displayIndex: observable,\r\n    isLoading: observable,\r\n    isLoadError: observable,\r\n    jobTableData: computed,\r\n});\r\n\r\nexport class Job {\r\n    constructor(options) {\r\n        //always use the default settings\r\n        var defaults = {\r\n            name: 'N/A',\r\n            browserName: 'N/A',\r\n            operatingSystem: 'N/A',\r\n            operatingSystemVersion: 'N/A',\r\n            unique_id: uuidv4(),\r\n            database_id: 0,\r\n            createdAt: Date.now(),\r\n            updatedtAt: Date.now(),\r\n            //when the job is created the settings at the time are frozen and copied in\r\n            settings: {},\r\n            //record of all console messages\r\n            consoleMessages: [],\r\n            //container for pages\r\n            pages: [],\r\n            //the job must contain reporting stats on its contained pages, the AVERAGE for the important indicators across all ITERATIONS\r\n            dclAverage: 0,\r\n            completeAverage: 0,\r\n            dataUsageAverage: 0,\r\n            headerTimingsAverage: 0,\r\n            imageRequestsAverage: 0,\r\n            fontRequestsAverage: 0,\r\n            mediaRequestsAverage: 0,\r\n            cssRequestsAverage: 0,\r\n            scriptRequestsAverage: 0,\r\n            //then we need to see totals for comparative purposes\r\n            imageLoadTotal: 0,\r\n            mediaLoadTotal: 0,\r\n            fontLoadTotal: 0,\r\n            cssLoadTotal: 0,\r\n            scriptLoadTotal: 0,\r\n            minorResources: {\r\n                htmlLoadAverage: 0,\r\n                htmlRequestsAverage: 0,\r\n                xhrLoadAverage: 0,\r\n                xhrRequestsAverage: 0,\r\n                fetchLoadAverage: 0,\r\n                fetchRequestsAverage: 0,\r\n                websocketLoadAverage: 0,\r\n                websocketRequestsAverage: 0,\r\n                errorArray: 0,\r\n                errorCount: 0,\r\n            },\r\n        };\r\n\r\n        // create a new object with the defaults over-ridden by the options passed in\r\n        let opts = Object.assign({}, defaults, options);\r\n\r\n        // assign options to instance data (using only property names contained in defaults object to avoid copying properties we don't want)\r\n        Object.keys(defaults).forEach((prop) => {\r\n            this[prop] = opts[prop];\r\n        });\r\n\r\n        //then when a page gets added we recalc the averages and save to the database\r\n        //using reaction here rather than autosave as we only care about a couple of properties\r\n        reaction(\r\n            () => this.pages.length,\r\n            () => {\r\n                console.log('reaction: Autogenerating Job Reporting Stats');\r\n                //first we work out the averages\r\n                this.dclAverage = this.pages.map((item) => item.dclAverage).reduce(RoundedAverage, 0);\r\n                this.completeAverage = this.pages.map((item) => item.completeAverage).reduce(RoundedAverage, 0);\r\n                this.dataUsageAverage = this.pages\r\n                    .map((item) => item.dataUsageAverage)\r\n                    .reduce(RoundedAverageMegaBytes, 0);\r\n                this.headerTimingsAverage = this.pages\r\n                    .map((item) => item.headerTimingsAverage)\r\n                    .reduce(RoundedAverage, 0);\r\n                this.imageRequestsAverage = this.pages\r\n                    .map((item) => item.imageRequestsAverage)\r\n                    .reduce(RoundedAverage, 0);\r\n                this.fontRequestsAverage = this.pages.map((item) => item.fontRequestsAverage).reduce(RoundedAverage, 0);\r\n                this.mediaRequestsAverage = this.pages\r\n                    .map((item) => item.mediaRequestsAverage)\r\n                    .reduce(RoundedAverage, 0);\r\n                this.cssRequestsAverage = this.pages.map((item) => item.cssRequestsAverage).reduce(RoundedAverage, 0);\r\n                this.scriptRequestsAverage = this.pages\r\n                    .map((item) => item.scriptRequestsAverage)\r\n                    .reduce(RoundedAverage, 0);\r\n                //then we work out the running totals\r\n                this.imageLoadTotal = this.pages.map((item) => item.imageLoadAverage).reduce(TotalMegaBytes, 0);\r\n                this.mediaLoadTotal = this.pages.map((item) => item.mediaLoadAverage).reduce(TotalMegaBytes, 0);\r\n                this.fontLoadTotal = this.pages.map((item) => item.fontLoadAverage).reduce(TotalMegaBytes, 0);\r\n                this.cssLoadTotal = this.pages.map((item) => item.cssLoadAverage).reduce(TotalMegaBytes, 0);\r\n                this.scriptLoadTotal = this.pages.map((item) => item.scriptLoadAverage).reduce(TotalMegaBytes, 0);\r\n                //and update the date\r\n                this.updatedAt = Date.now();\r\n                //and then update in the database at this point\r\n                localdb\r\n                    .table('jobs')\r\n                    //do the update command with the id and the saveable version of the observed project\r\n                    .update(this.database_id, toJS(this))\r\n                    .then(() => {\r\n                        console.log(`Storage has updated on NEW PAGE of Job with ID ${this.database_id}`);\r\n                    })\r\n                    .catch((error) => console.error(error));\r\n            }\r\n        );\r\n\r\n        //then we also want to make changes to the saved job when the name gets changed\r\n        reaction(\r\n            () => this.name,\r\n            () => {\r\n                //and then update in the database at this point\r\n                localdb\r\n                    .table('jobs')\r\n                    //do the update command with the id and the saveable version of the observed project\r\n                    .update(this.database_id, toJS(this))\r\n                    .then(() => {\r\n                        console.log(`Storage has updated on NAME CHANGE of Job with ID ${this.database_id}`);\r\n                    })\r\n                    .catch((error) => console.error(error));\r\n            },\r\n            //and we need to have a delay so we can update after the typing has finished\r\n            { delay: 5000 }\r\n        );\r\n    }\r\n\r\n    get pageTableData() {\r\n        return this.pages.map((page) => {\r\n            //we have no need for the following fields in the table data, and it causes problems in the CSV download, so we destructure to remove\r\n            const { jobId, id, createdAt, screenshot, minorResources, ...partialPage } = page;\r\n            //then we return the partial page\r\n            return partialPage;\r\n        });\r\n    }\r\n\r\n    get pageMetricsTableData() {\r\n        return this.pages.map((page) => {\r\n            //then we return the partial data for the metrics table\r\n            return {\r\n                url: page.url,\r\n                metricsDocumentsAverage: page.minorResources.metricsDocumentsAverage,\r\n                metricsResourcesAverage: page.minorResources.metricsResourcesAverage,\r\n                metricsFramesAverage: page.minorResources.metricsFramesAverage,\r\n                metricsAdvertisingFramesAverage: page.minorResources.metricsAdvertisingFramesAverage,\r\n                metricsUsedHeapAverage: page.minorResources.metricsUsedHeapAverage,\r\n                metricsTotalHeapAverage: page.minorResources.metricsTotalHeapAverage,\r\n            };\r\n        });\r\n    }\r\n\r\n    get resourceLoadData() {\r\n        return {\r\n            datasets: [\r\n                {\r\n                    data: [\r\n                        this.cssLoadTotal,\r\n                        this.scriptLoadTotal,\r\n                        this.fontLoadTotal,\r\n                        this.imageLoadTotal,\r\n                        this.mediaLoadTotal,\r\n                    ],\r\n                    backgroundColor: [\r\n                        ColorPalette.deepsea,\r\n                        ColorPalette.limestone,\r\n                        ColorPalette.sand,\r\n                        ColorPalette.mushroom,\r\n                        ColorPalette.fawn,\r\n                    ],\r\n                    label: 'Total Resource Loads',\r\n                },\r\n            ],\r\n            labels: ['Stylesheets', 'Scripts', 'Fonts', 'Images', 'Videos'],\r\n        };\r\n    }\r\n\r\n    get requestData() {\r\n        return {\r\n            datasets: [\r\n                {\r\n                    data: [\r\n                        this.cssRequestsAverage,\r\n                        this.scriptRequestsAverage,\r\n                        this.fontRequestsAverage,\r\n                        this.imageRequestsAverage,\r\n                        this.mediaRequestsAverage,\r\n                    ],\r\n                    backgroundColor: [\r\n                        ColorPalette.deepsea,\r\n                        ColorPalette.limestone,\r\n                        ColorPalette.sand,\r\n                        ColorPalette.mushroom,\r\n                        ColorPalette.fawn,\r\n                    ],\r\n                    label: 'Average Requests',\r\n                },\r\n            ],\r\n            labels: ['Stylesheets', 'Scripts', 'Fonts', 'Images', 'Videos'],\r\n        };\r\n    }\r\n}\r\n\r\ndecorate(Job, {\r\n    name: observable,\r\n    consoleMessages: observable,\r\n    pages: observable,\r\n    //the job must contain reporting stats on its contained pages, the average for the important indicators\r\n    dclAverage: observable,\r\n    completeAverage: observable,\r\n    dataUsageAverage: observable,\r\n    headerTimingsAverage: observable,\r\n    imageRequestsAverage: observable,\r\n    fontRequestsAverage: observable,\r\n    mediaRequestsAverage: observable,\r\n    cssRequestsAverage: observable,\r\n    scriptRequestsAverage: observable,\r\n    //then we need to see totals for comparative purposes\r\n    imageLoadTotal: observable,\r\n    mediaLoadTotal: observable,\r\n    fontLoadTotal: observable,\r\n    cssLoadTotal: observable,\r\n    scriptLoadTotal: observable,\r\n    //then we need to add the computed function\r\n    pageTableData: computed,\r\n    pageMetricsTableData: computed,\r\n    resourceLoadData: computed,\r\n});\r\n\r\nexport class Page {\r\n    constructor(options) {\r\n        //always use the default settings, important that these remain in same order as table headers for csv download\r\n        var defaults = {\r\n            url: 'N/A',\r\n            id: uuidv4(),\r\n            createdAt: Date.now(),\r\n            //and we can save screenshot of page\r\n            screenshot: '',\r\n            //we always indicate average as we may run multiple iterations\r\n            dclAverage: 0,\r\n            completeAverage: 0,\r\n            dataUsageAverage: 0,\r\n            headerTimingsAverage: 0,\r\n            imageLoadAverage: 0,\r\n            imageRequestsAverage: 0,\r\n            mediaLoadAverage: 0,\r\n            mediaRequestsAverage: 0,\r\n            fontLoadAverage: 0,\r\n            fontRequestsAverage: 0,\r\n            scriptLoadAverage: 0,\r\n            scriptRequestsAverage: 0,\r\n            cssLoadAverage: 0,\r\n            cssRequestsAverage: 0,\r\n            //then we save the minor resources as well\r\n            minorResources: {},\r\n        };\r\n\r\n        // create a new object with the defaults over-ridden by the options passed in\r\n        let opts = Object.assign({}, defaults, options);\r\n\r\n        // assign options to instance data (using only property names contained in defaults object to avoid copying properties we don't want)\r\n        Object.keys(defaults).forEach((prop) => {\r\n            this[prop] = opts[prop];\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Settings } from '../stores/settingsStore';\r\nimport { JobStore } from '../stores/jobStore';\r\n\r\nexport const storesContext = React.createContext({\r\n    Settings: new Settings(),\r\n    JobStore: new JobStore(),\r\n});\r\n","import React from 'react';\r\nimport { storesContext } from './../contexts/storesContext';\r\n\r\nexport const useStores = () => React.useContext(storesContext);\r\n","import React, { useState } from 'react';\r\nimport { Menu } from 'semantic-ui-react';\r\nimport { runInAction } from 'mobx';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useStores } from './../hooks/useStores';\r\n\r\nexport const Navigation = () => {\r\n    const { Settings } = useStores();\r\n    const [active, setActive] = useState('home');\r\n\r\n    let history = useHistory();\r\n\r\n    const showDefaultSidebar = () => {\r\n        runInAction(() => {\r\n            Settings.sidebar = '';\r\n            Settings.showSidebar = true;\r\n        });\r\n    };\r\n\r\n    const handleItemClick = (e, { name }) => {\r\n        setActive(name);\r\n        history.push(`/${name}`);\r\n    };\r\n\r\n    return (\r\n        <Menu stackable>\r\n            <Menu.Item onClick={showDefaultSidebar}>\r\n                <img src='/logo48.png' alt='logo' />\r\n            </Menu.Item>\r\n\r\n            <Menu.Item\r\n                name='index.html'\r\n                active={active === 'index.html'}\r\n                onClick={handleItemClick}\r\n            >\r\n                Home\r\n            </Menu.Item>\r\n\r\n            <Menu.Item\r\n                name='settings'\r\n                active={active === 'settings'}\r\n                onClick={handleItemClick}\r\n            >\r\n                Settings\r\n            </Menu.Item>\r\n\r\n            <Menu.Item\r\n                name='results'\r\n                active={active === 'results'}\r\n                onClick={handleItemClick}\r\n            >\r\n                Results\r\n            </Menu.Item>\r\n\r\n            <Menu.Item\r\n                name='history'\r\n                active={active === 'history'}\r\n                onClick={handleItemClick}\r\n            >\r\n                History\r\n            </Menu.Item>\r\n        </Menu>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Header, Container, Segment } from 'semantic-ui-react';\r\nimport colors from './../components/charts/colorPalette.json';\r\n\r\nexport const SidebarItem = (props) => {\r\n    return (\r\n        <Container fluid style={{ height: '100%', backgroundColor: '#fff' }}>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{\r\n                    backgroundColor: colors.background,\r\n                    borderRadius: '0',\r\n                }}\r\n            >\r\n                <Header as='h5' content={props.title} />\r\n            </Segment>\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    paddingLeft: '10px',\r\n                    paddingRight: '10px',\r\n                    scroll: 'auto',\r\n                }}\r\n            >\r\n                {props.children}\r\n            </div>\r\n        </Container>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Form, Dropdown } from 'semantic-ui-react';\r\nimport { runInAction } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { useStores } from './../../../hooks/useStores';\r\n\r\nexport const LoadCustomList = observer(() => {\r\n    const { Settings } = useStores();\r\n    const options = Settings.customUrlLists.map((item, index) => {\r\n        return {\r\n            key: item.id,\r\n            text: item.name,\r\n            value: index,\r\n        };\r\n    });\r\n    const handleSelectionChange = (e, { value }) => {\r\n        runInAction(\r\n            () =>\r\n                (Settings.websites = [\r\n                    ...Settings.websites,\r\n                    ...Settings.customUrlLists[value].websites,\r\n                ])\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Form>\r\n            <Form.Field>\r\n                <label>Select custom list to load saved test pages</label>\r\n                <Dropdown\r\n                    selection\r\n                    name='Loadlist'\r\n                    options={options}\r\n                    placeholder='custom lists...'\r\n                    onChange={handleSelectionChange}\r\n                />\r\n            </Form.Field>\r\n        </Form>\r\n    );\r\n});\r\n","import React, { useState } from 'react';\r\nimport { runInAction, toJS } from 'mobx';\r\nimport { Form, Message } from 'semantic-ui-react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useStores } from './../../../hooks/useStores';\r\n\r\nexport const SaveCustomList = () => {\r\n    const { Settings } = useStores();\r\n    //we need state for form input\r\n    const [nameInput, setNameInput] = useState('');\r\n    //we need state for form input errors\r\n    const [nameInputError, setNameInputError] = useState(false);\r\n    //we need state for form success as well\r\n    const [formSuccess, setFormSuccess] = useState(false);\r\n\r\n    //this handles changes to the input box for new urls, removing commas as we cannot have commas in a comma separated list\r\n    const handleNameInputChange = (event) => setNameInput(event.target.value);\r\n\r\n    //keydown for detecting url input\r\n    const handleNameEnter = (event) => {\r\n        //get the input url\r\n        const inputName = event.target.value.trim();\r\n        //we only handle enter key press when we have some characters to change\r\n        if (event.key === 'Enter') {\r\n            //test to see if we have a valid url\r\n            if (inputName.length > 0) {\r\n                //clear any remaining errors\r\n                setNameInputError(false);\r\n                //lets get a data to can append, looking like this \"Wednesday_8/5/2020,_6:16_PM\"\r\n                const date = new Date()\r\n                    //get a sensible readable format\r\n                    .toLocaleString('en', {\r\n                        weekday: 'long',\r\n                        year: 'numeric',\r\n                        month: 'numeric',\r\n                        day: 'numeric',\r\n                        hour: 'numeric',\r\n                        minute: 'numeric',\r\n                    })\r\n                    //get rid of the comma\r\n                    .replace(',', '')\r\n                    //replace the spaces with underscore\r\n                    .split(' ')\r\n                    .join('_');\r\n                //then build our object\r\n                const customList = {\r\n                    name: `${nameInput}_${date}`,\r\n                    id: uuidv4(),\r\n                    websites: toJS(Settings.websites),\r\n                };\r\n                //then update our array\r\n                runInAction(\r\n                    () =>\r\n                        (Settings.customUrlLists = [\r\n                            ...Settings.customUrlLists,\r\n                            customList,\r\n                        ])\r\n                );\r\n                //then clear the url input box when we have a success\r\n                setNameInput('');\r\n                //then set the form success to show the message\r\n                setFormSuccess(true);\r\n            } else {\r\n                setNameInputError({\r\n                    content: 'Name must be 1 or more characters in length',\r\n                    pointing: 'below',\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Form>\r\n                <Form.Field>\r\n                    <Form.Input\r\n                        fluid\r\n                        label='Add name for custom list'\r\n                        type='text'\r\n                        placeholder='type and press enter to save...'\r\n                        value={nameInput}\r\n                        error={nameInputError}\r\n                        onChange={handleNameInputChange}\r\n                        onKeyUp={handleNameEnter}\r\n                    />\r\n                </Form.Field>\r\n            </Form>\r\n            {formSuccess ? (\r\n                <Message\r\n                    success\r\n                    header='Custom List Saved'\r\n                    content='You can view all custom lists via load button'\r\n                />\r\n            ) : null}\r\n        </>\r\n    );\r\n};\r\n","import { useLayoutEffect, useState } from 'react';\r\n\r\nexport const useWindowSize = () => {\r\n    let [size, setSize] = useState([0, 0]);\r\n    useLayoutEffect(() => {\r\n        function updateSize() {\r\n            setSize([window.innerWidth, window.innerHeight]);\r\n        }\r\n        window.addEventListener('resize', updateSize);\r\n        updateSize();\r\n        return () => window.removeEventListener('resize', updateSize);\r\n    }, []);\r\n    return size;\r\n};\r\n","import React from 'react';\r\nimport { Segment, Header, Icon } from 'semantic-ui-react';\r\n\r\nexport const PlaceHolder = (props) => {\r\n    //any element that may find itself inside our carousel component needs to be able to accept customStyle prop\r\n    const newStyle = { ...props.customStyle, height: '100%' };\r\n\r\n    return (\r\n        <Segment placeholder style={newStyle}>\r\n            <Header icon>\r\n                <Icon\r\n                    name={props.iconName}\r\n                    style={{ color: props.iconColour }}\r\n                />\r\n                {props.message}\r\n            </Header>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nPlaceHolder.defaultProps = {\r\n    //choose your icon\r\n    iconName: 'ban',\r\n    //choose your icon color\r\n    iconColour: 'black',\r\n    //as {elementType} An element type to render as (string or function).\r\n    message: 'Oops. Nothing to see here',\r\n    //any element that may find itself inside our carousel component needs to be able to accept customStyle prop\r\n    customStyle: {},\r\n};\r\n","import React, { useLayoutEffect, useRef, useContext, memo } from 'react';\r\nimport { VirtualGridContext } from './virtualGrid';\r\n\r\n//we use react memo in case the items passed to the list row as message are complex html\r\nexport const VirtualGridCell = memo(({ columnIndex, data, rowIndex }) => {\r\n    //here we use context to be set the size of the row and also so we can listen to changes on the window and any other size changes\r\n    const { setSize, windowWidth } = useContext(VirtualGridContext);\r\n    //simple ref so we can imperatively get hold of height in hook\r\n    const root = useRef();\r\n    //use layout effect This runs synchronously immediately after React has performed all DOM mutations. This can be useful if you need to make DOM measurements\r\n    useLayoutEffect(() => {\r\n        //then we use the context function to pass the row size to the parent list\r\n        setSize(rowIndex, root.current.getBoundingClientRect().height);\r\n        //any changes in windowWidth or the container width may require a repaint\r\n    }, [columnIndex, rowIndex, setSize, windowWidth]);\r\n    // Access the data source using the \"data\" prop:\r\n    const item = data[rowIndex][columnIndex];\r\n\r\n    return (\r\n        <div\r\n            ref={root}\r\n            className='GridItem'\r\n            title={typeof item === 'string' ? item : null}\r\n        >\r\n            {item}\r\n        </div>\r\n    );\r\n});\r\n","import React, { createContext, useRef, useCallback } from 'react';\r\nimport { VariableSizeGrid as Grid } from 'react-window';\r\nimport AutoSizer from 'react-virtualized-auto-sizer';\r\nimport { useWindowSize } from './../../hooks/useWindowResize';\r\nimport { PlaceHolder } from './../placeHolder';\r\nimport { VirtualGridCell } from './virtualGridCell';\r\nimport colors from './../charts/colorPalette.json';\r\n\r\n//import our styling\r\nimport './virtualGrid.css';\r\n\r\n//set up the context provider to share the setSize function and changes to window or container width\r\nexport const VirtualGridContext = createContext({});\r\n\r\nexport const VirtualGrid = ({ gridRef, rowData, columnWidths }) => {\r\n    //we need to keep a memory of the row heights which we keep in a lookup object\r\n    const sizeMap = useRef({});\r\n    //then we have a function that we keep in memory that allows for the updating of the row height\r\n    const setSize = useCallback((index, size) => {\r\n        //spread operator to update object, if we have no value or the grid row needs to get bigger\r\n        if (!sizeMap.current[index] || size > sizeMap.current[index])\r\n            sizeMap.current = { ...sizeMap.current, [index]: size };\r\n    }, []);\r\n    //then we have the function to get the size of the row that we pass to the list\r\n    const getSize = useCallback((index) => {\r\n        return sizeMap.current[index] || 50;\r\n    }, []);\r\n\r\n    //then we have the custom hook that is listening for changes in window size\r\n    const [windowWidth] = useWindowSize();\r\n\r\n    const onResize = () => {\r\n        if (gridRef.current != null) {\r\n            gridRef.current.resetAfterIndices({\r\n                columnIndex: 0,\r\n                rowIndex: 0,\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <VirtualGridContext.Provider value={{ setSize, windowWidth }}>\r\n            {/* This is required to make the virtual list autosize interact with flexbox parents */}\r\n            <div className='gridContainer'>\r\n                {/* No point in showing the autosized list until we have data */}\r\n                {rowData.length > 0 ? (\r\n                    <AutoSizer onResize={onResize}>\r\n                        {/* Auto-sizer provides height and width */}\r\n                        {({ height, width }) => (\r\n                            <Grid\r\n                                className='Grid'\r\n                                height={height}\r\n                                width={width}\r\n                                columnCount={rowData[0].length}\r\n                                columnWidth={(index) =>\r\n                                    //if we have a column widths array then pass the value from the array, otherwise equal\r\n                                    columnWidths.length ? columnWidths[index] : Math.floor(width / rowData[0].length)\r\n                                }\r\n                                rowCount={rowData.length}\r\n                                rowHeight={getSize}\r\n                                itemData={rowData}\r\n                                ref={gridRef}\r\n                                onScroll={onResize}\r\n                            >\r\n                                {({ columnIndex, data, rowIndex, style }) => (\r\n                                    // react-window work by absolutely positioning the list items (via an inline style), so don't forget to attach it to the DOM element you render!\r\n                                    <div style={style} className={rowIndex % 2 ? 'GridItemOdd' : 'GridItemEven'}>\r\n                                        {/* Other styles added at component level */}\r\n                                        <VirtualGridCell columnIndex={columnIndex} data={data} rowIndex={rowIndex} />\r\n                                    </div>\r\n                                )}\r\n                            </Grid>\r\n                        )}\r\n                    </AutoSizer>\r\n                ) : (\r\n                    <PlaceHolder\r\n                        iconName='keyboard outline'\r\n                        iconColour='grey'\r\n                        message='Add urls for test run'\r\n                        style={{ backgroundColor: colors.background }}\r\n                    />\r\n                )}\r\n            </div>\r\n        </VirtualGridContext.Provider>\r\n    );\r\n};\r\n\r\nVirtualGrid.defaultProps = {\r\n    columnWidths: [],\r\n};\r\n","import React, { createRef } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Header, Tab } from 'semantic-ui-react';\r\nimport { VirtualGrid } from './../../lists/virtualGrid';\r\n\r\nexport const ErrorReport = observer((props) => {\r\n    //create the tabs from the error array - NOTE THAT AN EMPTY ARRAY WILL BE RETURNED IF NO ERRORS\r\n    const panes = props.errorArray.map((errorItem, index) => {\r\n        //we need to have a reference for the grid for resize and scroll operations\r\n        const gridRef = createRef(null);\r\n        return {\r\n            menuItem: `${index + 1}`,\r\n            render: () => (\r\n                <Tab.Pane>\r\n                    <VirtualGrid\r\n                        gridRef={gridRef}\r\n                        //the error array has a key for each iteration index, and the value is the error array for that iteration\r\n                        //so we use object values to get the error array and then object values again to get the values of each object in that error array\r\n                        rowData={Object.values(errorItem)[0].map((item) => Object.values(item))}\r\n                        //we set the values of column widths manually\r\n                        columnWidths={[100, 250, 250]}\r\n                    />\r\n                </Tab.Pane>\r\n            ),\r\n        };\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Header as='h4' content='Errors by iteration' />\r\n            <Tab panes={panes} />\r\n        </>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { Header, Image, Statistic } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { useStores } from '../../../hooks/useStores';\r\nimport ColorPalette from './../../charts/colorPalette.json';\r\nimport { ErrorReport } from './errorReport';\r\n\r\nexport const PageDetail = observer(() => {\r\n    const { JobStore, Settings } = useStores();\r\n    //get the activeJob, which will depend upon which parent component calls this component\r\n    const activeJob = JobStore.jobs.length\r\n        ? //if we are in the history page, then we will have set the job display index, so we use that.\r\n          Settings.jobDisplayIndex\r\n            ? JobStore.jobs[JobStore.jobDisplayIndex]\r\n            : //if we are in the results page, then we can just use the active job\r\n              JobStore.jobs[JobStore.activeIndex]\r\n        : JobStore.placeholderJob;\r\n    //get the active page\r\n    const activePage = activeJob.pages.length ? activeJob.pages[Settings.pageDisplayIndex] : JobStore.placeholderPage;\r\n    const data = {\r\n        labels: ['HTML', 'XHR', 'Fetch', 'Websocket'],\r\n        datasets: [\r\n            {\r\n                label: 'Resource load (bytes)',\r\n                backgroundColor: ColorPalette.stormysky,\r\n                yAxisID: 'y-axis-1',\r\n                data: [\r\n                    activePage.minorResources.htmlLoadAverage,\r\n                    activePage.minorResources.xhrLoadAverage,\r\n                    activePage.minorResources.fetchLoadAverage,\r\n                    activePage.minorResources.websocketLoadAverage,\r\n                ],\r\n            },\r\n            {\r\n                label: 'Requests',\r\n                backgroundColor: ColorPalette.eggshell,\r\n                yAxisID: 'y-axis-2',\r\n                data: [\r\n                    activePage.minorResources.htmlRequestsAverage,\r\n                    activePage.minorResources.xhrRequestsAverage,\r\n                    activePage.minorResources.fetchRequestsAverage,\r\n                    activePage.minorResources.websocketRequestsAverage,\r\n                ],\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Header as='h4' content={activePage.url} />\r\n            <Image fluid src={activePage.screenshot} />\r\n            <Header as='h4' content='Minor resources' />\r\n            <Bar\r\n                data={data}\r\n                options={{\r\n                    responsive: true,\r\n                    tooltips: {\r\n                        mode: 'index',\r\n                        intersect: true,\r\n                    },\r\n                    scales: {\r\n                        yAxes: [\r\n                            {\r\n                                type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\r\n                                display: true,\r\n                                position: 'left',\r\n                                id: 'y-axis-1',\r\n                            },\r\n                            {\r\n                                type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\r\n                                display: true,\r\n                                position: 'right',\r\n                                id: 'y-axis-2',\r\n                                gridLines: {\r\n                                    drawOnChartArea: false,\r\n                                },\r\n                                ticks: {\r\n                                    precision: 0,\r\n                                },\r\n                            },\r\n                        ],\r\n                    },\r\n                    animation: {\r\n                        animateScale: true,\r\n                    },\r\n                }}\r\n            />\r\n            <Header as='h4' content='Blocked resources / errors' />\r\n            <Statistic label='blocked / errors' value={activePage.minorResources.errorCount} />\r\n            {activePage.minorResources.errorCount > 0 ? (\r\n                <ErrorReport errorArray={activePage.minorResources.errorArray} />\r\n            ) : null}\r\n        </>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStores } from './../hooks/useStores';\r\nimport { SidebarItem } from './../components/sidebarItem';\r\nimport { LoadCustomList } from './../components/settings/sidebar/loadCustomList';\r\nimport { SaveCustomList } from './../components/settings/sidebar/saveCustomList';\r\nimport { PageDetail } from './../components/results/sidebar/pageDetail';\r\n\r\nexport const SidebarContent = () => {\r\n    const { Settings } = useStores();\r\n    switch (Settings.sidebar) {\r\n        case 'loadUrls':\r\n            return (\r\n                <SidebarItem title='Load custom list into current test pages'>\r\n                    {/* this forces the reload of the component so we can have form resets etc. */}\r\n                    {Settings.showSidebar ? <LoadCustomList /> : null}\r\n                </SidebarItem>\r\n            );\r\n        case 'saveUrls':\r\n            return (\r\n                <SidebarItem title='Save current test pages into custom list'>\r\n                    {/* this forces the reload of the component so we can have form resets etc. */}\r\n                    {Settings.showSidebar ? <SaveCustomList /> : null}\r\n                </SidebarItem>\r\n            );\r\n        case 'showPageDetail':\r\n            return (\r\n                <SidebarItem title='Page detail'>\r\n                    {/* this forces the reload of the component so we can have form resets etc. */}\r\n                    {Settings.showSidebar ? <PageDetail /> : null}\r\n                </SidebarItem>\r\n            );\r\n        default:\r\n            return (\r\n                <SidebarItem title='Useful info'>\r\n                    <Header as='h4' content='About us' />\r\n                    <p>\r\n                        This extension was developed in order to test the performance of{' '}\r\n                        <a target='_blank' href='https://turbobrowser.eu/' rel='noopener noreferrer'>\r\n                            Turbo\r\n                        </a>\r\n                        , a Chromium-based browser that offers faster download speeds and lower data usage for desktop\r\n                        and mobile users.\r\n                    </p>\r\n                    <Header as='h4' content='Get in touch' />\r\n                    <p>\r\n                        The project is open source. For any bug reports, questions or other issues, please get in touch\r\n                        with us at our{' '}\r\n                        <a target='_blank' href='https://github.com/tomgallagher/Clocker' rel='noopener noreferrer'>\r\n                            Github\r\n                        </a>{' '}\r\n                        page.\r\n                    </p>\r\n                    <Header as='h4' content='Tips and tricks' />\r\n                    <ul\r\n                        style={{\r\n                            marginBlockStart: '5px',\r\n                            paddingInlineStart: '20px',\r\n                        }}\r\n                    >\r\n                        <li style={{ paddingBottom: '10px' }}>\r\n                            When you start your first test, you will notice a popup at the top of each browser tab,\r\n                            alerting you that Clocker uses the <strong>Remote Debugging Protocol</strong>. If this\r\n                            bothers you, make the following changes:\r\n                            <ul\r\n                                style={{\r\n                                    marginBlockStart: '5px',\r\n                                    paddingInlineStart: '20px',\r\n                                }}\r\n                            >\r\n                                <li>\r\n                                    Windows - Right click on Chrome icon, select Properties, select Shortcut tab, in\r\n                                    Target field add --silent-debugger-extension-api after and <strong>outside</strong>{' '}\r\n                                    the target string.\r\n                                </li>\r\n                                <li>\r\n                                    macOS - open the terminal and paste this path '/Applications/Google\\\r\n                                    Chrome.app/Contents/MacOS/Google\\ Chrome --silent-debugger-extension-api' then\r\n                                    Enter.\r\n                                </li>\r\n                            </ul>\r\n                        </li>\r\n                        <li style={{ paddingBottom: '10px' }}>\r\n                            Accurate reporting of image load statistics depends on the testing tab being{' '}\r\n                            <strong>the active viewed tab</strong>. Tests can be run with live monitoring of the Results\r\n                            page, if image statistics are not the focus of testing.\r\n                        </li>\r\n                        <li style={{ paddingBottom: '10px' }}>\r\n                            The browser cache and service workers can distort statistics. On sites which make extensive\r\n                            use of service workers, these should be disallowed and multiple <strong>iterations</strong>{' '}\r\n                            selected to generate accurate reports.\r\n                        </li>\r\n                        <li style={{ paddingBottom: '10px' }}>\r\n                            The Page Results table has a master/detail view. Click on any page <strong>row</strong> to\r\n                            get screenshot, further stats and blocking/error reports in the sidebar.\r\n                        </li>\r\n                    </ul>\r\n                </SidebarItem>\r\n            );\r\n    }\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Segment, Header, Grid, Image, Button, Divider, Message } from 'semantic-ui-react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { toJS } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { useStores } from './../../hooks/useStores';\r\nimport Chromium from './../../images/chromium.webp';\r\n\r\nexport const Banner = observer(() => {\r\n    const { JobStore, Settings } = useStores();\r\n    const [showMessage, setShowMessage] = useState(false);\r\n    let history = useHistory();\r\n\r\n    const handleStartClick = () => {\r\n        if (Settings.websites.length) {\r\n            //remove the warning, if present\r\n            setShowMessage(false);\r\n            //get the settings info we care about as partial\r\n            //we freeze the settings as a JS object so we can save it into local storage\r\n            const {\r\n                pageDisplayIndex,\r\n                customUrlLists,\r\n                isPaused,\r\n                sidebar,\r\n                showSidebar,\r\n                themeBackground,\r\n                settingsLayouts,\r\n                resultsLayouts,\r\n                historyLayouts,\r\n                ...partialSettings\r\n            } = toJS(Settings);\r\n            //then create the job, which then sends a message to background.js that starts the process\r\n            JobStore.createJob({ settings: partialSettings });\r\n            //then move to the results page\r\n            history.push('/results');\r\n        } else {\r\n            setShowMessage(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Segment vertical style={{ padding: '4em 0em' }}>\r\n            <Grid container stackable textAlign='center'>\r\n                <Grid.Row>\r\n                    <Grid.Column width={8} textAlign='left'>\r\n                        <Header\r\n                            style={{\r\n                                fontFamily: \"'PT Serif Caption', serif\",\r\n                                fontSize: '4em',\r\n                            }}\r\n                        >\r\n                            Start. Clock. Results.\r\n                        </Header>\r\n\r\n                        <Header as='h3'>\r\n                            Performance analysis of Chromium-based browsers and <nobr>content-blocking</nobr>{' '}\r\n                            extensions.\r\n                        </Header>\r\n\r\n                        <Divider hidden></Divider>\r\n\r\n                        <Grid stackable textAlign='left'>\r\n                            <Grid.Row>\r\n                                <Grid.Column width={4}>\r\n                                    <Button color='black' onClick={handleStartClick}>\r\n                                        Start\r\n                                    </Button>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={8}>\r\n                                    {showMessage ? (\r\n                                        <Message size='tiny'>Test websites must be added to settings</Message>\r\n                                    ) : null}\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Grid.Column>\r\n\r\n                    <Grid.Column width={6} floated='right'>\r\n                        <Image circular bordered size='large' src={Chromium} />\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </Segment>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { Segment, Header, Grid, Reveal, Icon } from 'semantic-ui-react';\r\n\r\nexport const Cards = () => {\r\n    return (\r\n        <Segment vertical style={{ paddingTop: '14vh' }} textAlign='center'>\r\n            <Grid container stackable textAlign='center'>\r\n                <Grid.Row>\r\n                    <Grid.Column width={16}>\r\n                        <Header\r\n                            style={{\r\n                                fontFamily: \"'PT Serif Caption', serif\",\r\n                                fontSize: '3em',\r\n                            }}\r\n                        >\r\n                            Key metric performance analysis\r\n                        </Header>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n\r\n                <Grid.Row\r\n                    divided\r\n                    verticalAlign='middle'\r\n                    textAlign='center'\r\n                    columns={3}\r\n                >\r\n                    <Grid.Column className='reveal-container'>\r\n                        <Reveal animated='move' instant>\r\n                            <Reveal.Content visible style={{ width: '100%' }}>\r\n                                <div className='reveal-visible-content'>\r\n                                    <Header as='h2' icon>\r\n                                        <Icon name='tasks' />\r\n                                        Customize\r\n                                    </Header>\r\n                                </div>\r\n                            </Reveal.Content>\r\n                            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                                <div className='reveal-hidden-content'>\r\n                                    <p className='reveal-hidden-content-item'>\r\n                                        Enter custom urls to test or use our\r\n                                        regional default lists\r\n                                    </p>\r\n                                    <p className='reveal-hidden-content-item'>\r\n                                        Adjust bandwidth, latency, page\r\n                                        iterations and cache behaviour\r\n                                    </p>\r\n                                </div>\r\n                            </Reveal.Content>\r\n                        </Reveal>\r\n                    </Grid.Column>\r\n                    <Grid.Column className='reveal-container'>\r\n                        <Reveal animated='move' instant>\r\n                            <Reveal.Content visible style={{ width: '100%' }}>\r\n                                <div className='reveal-visible-content'>\r\n                                    <Header as='h2' icon>\r\n                                        <Icon name='exchange' />\r\n                                        Monitor\r\n                                    </Header>\r\n                                </div>\r\n                            </Reveal.Content>\r\n                            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                                <div className='reveal-hidden-content'>\r\n                                    <p className='reveal-hidden-content-item'>\r\n                                        View live progress and summary\r\n                                        statistics as test runs\r\n                                    </p>\r\n                                    <p className='reveal-hidden-content-item'>\r\n                                        Monitor activity log for test messages,\r\n                                        including page errors\r\n                                    </p>\r\n                                </div>\r\n                            </Reveal.Content>\r\n                        </Reveal>\r\n                    </Grid.Column>\r\n                    <Grid.Column className='reveal-container'>\r\n                        <Reveal animated='move' instant>\r\n                            <Reveal.Content visible style={{ width: '100%' }}>\r\n                                <div className='reveal-visible-content'>\r\n                                    <Header as='h2' icon>\r\n                                        <Icon name='file pdf outline' />\r\n                                        Report\r\n                                    </Header>\r\n                                </div>\r\n                            </Reveal.Content>\r\n                            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                                <div className='reveal-hidden-content'>\r\n                                    <p className='reveal-hidden-content-item'>\r\n                                        Select saved tests from history to\r\n                                        export results\r\n                                    </p>\r\n                                    <p className='reveal-hidden-content-item'>\r\n                                        Test data available as csv or pdf\r\n                                        exports to share\r\n                                    </p>\r\n                                </div>\r\n                            </Reveal.Content>\r\n                        </Reveal>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </Segment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport { Banner } from './../components/home/banner';\r\nimport { Cards } from './../components/home/cards';\r\nimport ColorPalette from './../components/charts/colorPalette.json';\r\n\r\nexport const Home = () => {\r\n    return (\r\n        <Container fluid>\r\n            <div\r\n                className='themeWrapper'\r\n                style={{ backgroundColor: ColorPalette.background }}\r\n            >\r\n                <Banner />\r\n            </div>\r\n            <Cards />\r\n        </Container>\r\n    );\r\n};\r\n","import React from 'react';\nimport { Header } from 'semantic-ui-react';\n\nexport const PageTitle = (props) => {\n    return (\n        <Header\n            as='h2'\n            content={props.title ? props.title : ''}\n            dividing={props.dividing}\n            subheader={props.subtitle ? props.subtitle : ''}\n        />\n    );\n};\n","import React from 'react';\r\nimport { Segment, Header } from 'semantic-ui-react';\r\nimport colors from './../components/charts/colorPalette.json';\r\n\r\nexport const GridItem = (props) => {\r\n    return (\r\n        <div className='internal-grid-item'>\r\n            <Segment\r\n                textAlign='center'\r\n                className='draggableHandle'\r\n                style={{\r\n                    backgroundColor: colors.background,\r\n                    borderRadius: '0',\r\n                }}\r\n            >\r\n                <Header as='h4' content={props.header} />\r\n            </Segment>\r\n            <div className='internal-grid-content'>{props.children}</div>\r\n        </div>\r\n    );\r\n};\r\n","export const DefaultSettingsLayouts = {\r\n    // 12 columns\r\n    lg: [\r\n        { i: 'latency', w: 2, h: 2, x: 0, y: 0, isBounded: true },\r\n        { i: 'webPageSelector', w: 6, h: 4, x: 2, y: 0, isBounded: true },\r\n        { i: 'bandwidth', w: 2, h: 2, x: 8, y: 0, isBounded: true },\r\n        { i: 'pageIterations', w: 2, h: 2, x: 10, y: 0, isBounded: true },\r\n        { i: 'screenshot', w: 2, h: 2, x: 0, y: 2, isBounded: true },\r\n        { i: 'withCache', w: 2, h: 2, x: 8, y: 2, isBounded: true },\r\n        { i: 'withServiceWorker', w: 2, h: 2, x: 10, y: 2, isBounded: true },\r\n    ],\r\n    // 10 columns\r\n    md: [\r\n        { i: 'latency', w: 5, h: 2, x: 0, y: 6, isBounded: true },\r\n        { i: 'webPageSelector', w: 8, h: 4, x: 2, y: 0, isBounded: true },\r\n        { i: 'pageIterations', w: 2, h: 2, x: 0, y: 2, isBounded: true },\r\n        { i: 'bandwidth', w: 2, h: 2, x: 0, y: 0, isBounded: true },\r\n        { i: 'screenshot', w: 5, h: 2, x: 5, y: 6, isBounded: true },\r\n        { i: 'withCache', w: 5, h: 2, x: 0, y: 4, isBounded: true },\r\n        { i: 'withServiceWorker', w: 5, h: 2, x: 5, y: 4, isBounded: true },\r\n    ],\r\n    // 6 columns\r\n    sm: [\r\n        { w: 3, h: 2, x: 0, y: 8, i: 'latency', isBounded: true },\r\n        { w: 6, h: 4, x: 0, y: 0, i: 'webPageSelector', isBounded: true },\r\n        { w: 3, h: 2, x: 3, y: 4, i: 'pageIterations', isBounded: true },\r\n        { w: 3, h: 2, x: 0, y: 4, i: 'bandwidth', isBounded: true },\r\n        { w: 3, h: 2, x: 3, y: 8, i: 'screenshot', isBounded: true },\r\n        { w: 3, h: 2, x: 0, y: 6, i: 'withCache', isBounded: true },\r\n        { w: 3, h: 2, x: 3, y: 6, i: 'withServiceWorker', isBounded: true },\r\n    ],\r\n    // 4 columns\r\n    xs: [\r\n        { w: 2, h: 2, x: 0, y: 9, i: 'latency', isBounded: true },\r\n        { w: 4, h: 5, x: 0, y: 0, i: 'webPageSelector', isBounded: true },\r\n        { w: 2, h: 2, x: 2, y: 5, i: 'pageIterations', isBounded: true },\r\n        { w: 2, h: 2, x: 0, y: 5, i: 'bandwidth', isBounded: true },\r\n        { w: 2, h: 2, x: 2, y: 9, i: 'screenshot', isBounded: true },\r\n        { w: 2, h: 2, x: 0, y: 7, i: 'withCache', isBounded: true },\r\n        { w: 2, h: 2, x: 2, y: 7, i: 'withServiceWorker', isBounded: true },\r\n    ],\r\n    // 2 columns\r\n    xxs: [\r\n        { w: 2, h: 2, x: 0, y: 12, i: 'latency', isBounded: true },\r\n        { w: 2, h: 4, x: 0, y: 0, i: 'webPageSelector', isBounded: true },\r\n        { w: 2, h: 2, x: 0, y: 6, i: 'pageIterations', isBounded: true },\r\n        { w: 2, h: 2, x: 0, y: 4, i: 'bandwidth', isBounded: true },\r\n        { w: 2, h: 2, x: 0, y: 14, i: 'screenshot', isBounded: true },\r\n        { w: 2, h: 2, x: 0, y: 8, i: 'withCache', isBounded: true },\r\n        { w: 2, h: 2, x: 0, y: 10, i: 'withServiceWorker', isBounded: true },\r\n    ],\r\n};\r\n","import React from 'react';\r\nimport { Popup, Statistic } from 'semantic-ui-react';\r\nimport { Slider } from 'react-semantic-ui-range';\r\nimport { runInAction } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { useStores } from './../../hooks/useStores';\r\n\r\nexport const Bandwidth = observer(() => {\r\n    const { Settings } = useStores();\r\n    const sliderSettings = {\r\n        start: Settings.bandwidth,\r\n        min: 0.5,\r\n        max: 20,\r\n        step: 0.5,\r\n        onChange: (value) => {\r\n            runInAction(() => (Settings.bandwidth = value));\r\n        },\r\n    };\r\n\r\n    return (\r\n        <div className='internal-grid-content-rows'>\r\n            <Popup\r\n                trigger={<Statistic label='Mbps' value={Settings.bandwidth} />}\r\n                basic\r\n                mouseEnterDelay={500}\r\n                size='tiny'\r\n            >\r\n                <Popup.Header>Bandwidth Throttling</Popup.Header>\r\n                <Popup.Content>\r\n                    Change state to throttle bandwidth to chosen level, in\r\n                    Megabits per second\r\n                </Popup.Content>\r\n            </Popup>\r\n\r\n            <Slider\r\n                value={Settings.bandwidth}\r\n                color='grey'\r\n                settings={sliderSettings}\r\n            />\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { Popup, Statistic } from 'semantic-ui-react';\r\nimport { Slider } from 'react-semantic-ui-range';\r\nimport { runInAction } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { useStores } from './../../hooks/useStores';\r\n\r\nexport const Latency = observer(() => {\r\n    const { Settings } = useStores();\r\n    const sliderSettings = {\r\n        start: Settings.latency,\r\n        min: 0,\r\n        max: 300,\r\n        step: 10,\r\n        onChange: (value) => {\r\n            runInAction(() => (Settings.bandwidth = value));\r\n        },\r\n    };\r\n\r\n    return (\r\n        <div className='internal-grid-content-rows'>\r\n            <Popup\r\n                trigger={<Statistic label='ms' value={Settings.latency} />}\r\n                basic\r\n                mouseEnterDelay={500}\r\n                size='tiny'\r\n            >\r\n                <Popup.Header>Latency Throttling</Popup.Header>\r\n                <Popup.Content>\r\n                    Change state to add additional latency into all resource\r\n                    requests, in milliseconds\r\n                </Popup.Content>\r\n            </Popup>\r\n\r\n            <Slider\r\n                value={Settings.latency}\r\n                color='grey'\r\n                settings={sliderSettings}\r\n            />\r\n        </div>\r\n    );\r\n});\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Label, Image, Button, Form, Segment } from 'semantic-ui-react';\r\nimport { runInAction } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport raw from 'raw.macro';\r\nimport { useStores } from './../../hooks/useStores';\r\nimport { VirtualGrid } from '../lists/virtualGrid';\r\n\r\nconst euroSource = raw('./../../database/euro_sites.txt')\r\n    .split('\\n')\r\n    .filter(Boolean);\r\n\r\nconst usSource = raw('./../../database/us_sites.txt')\r\n    .split('\\n')\r\n    .filter(Boolean);\r\n\r\nconst urlRegex = /^(?:(?:https?):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i;\r\n\r\nexport const WebsiteSelector = observer(() => {\r\n    //get access to the settings\r\n    const { Settings } = useStores();\r\n    //we need state for form input\r\n    const [urlInput, setUrlInput] = useState('');\r\n    //we need state for form input errors\r\n    const [urlInputError, setUrlInputError] = useState(false);\r\n    //then parse the current parsed websites computed value to display\r\n    const processed = Settings.parsedWebsites.map((parsed) => [\r\n        <Label\r\n            className='urlShortName'\r\n            as='a'\r\n            target='_blank'\r\n            content={parsed.name}\r\n        />,\r\n        <Image\r\n            avatar\r\n            centered\r\n            style={{ display: 'block' }}\r\n            src={parsed.favicon}\r\n            onError={(e) => {\r\n                e.target.onerror = null;\r\n                e.target.src = `https://eu.ui-avatars.com/api/?name=${parsed.name}`;\r\n            }}\r\n        />,\r\n        parsed.url,\r\n    ]);\r\n    //we need a reference to the virtual grid so we can reset according changes in processed data\r\n    const gridRef = useRef();\r\n    //when we have changes to processed data we refresh the virtual grid\r\n    useEffect(() => {\r\n        if (gridRef.current != null) {\r\n            gridRef.current.resetAfterIndices({\r\n                columnIndex: 0,\r\n                rowIndex: 0,\r\n            });\r\n            gridRef.current.scrollToItem(0);\r\n        }\r\n    }, [processed]);\r\n    //buttons for changing regions\r\n    const handleRegionClick = (e, { name }) => {\r\n        //then load the right regional sites\r\n        switch (name) {\r\n            case 'eu':\r\n                runInAction(() => (Settings.websites = [...euroSource]));\r\n                break;\r\n            case 'us':\r\n                runInAction(() => (Settings.websites = [...usSource]));\r\n                break;\r\n            case 'clear':\r\n                runInAction(() => (Settings.websites = []));\r\n                break;\r\n            default:\r\n                console.log('Unrecognised Region Name');\r\n        }\r\n    };\r\n    //this handles changes to the input box for new urls, removing commas as we cannot have commas in a comma separated list\r\n    const handleUrlChange = (event) => setUrlInput(event.target.value);\r\n\r\n    //keydown for detecting url input\r\n    const handleUrlEnter = (event) => {\r\n        //get the input url\r\n        const inputUrl = event.target.value.trim();\r\n        //we only handle enter key press when we have some characters to change\r\n        if (event.key === 'Enter' && inputUrl.length > 0) {\r\n            //test to see if we have a valid url\r\n            if (urlRegex.test(inputUrl)) {\r\n                //clear any remaining errors\r\n                setUrlInputError(false);\r\n                //then update our array\r\n                runInAction(\r\n                    () => (Settings.websites = [...Settings.websites, inputUrl])\r\n                );\r\n                //then clear the url input box when we have a success\r\n                setUrlInput('');\r\n            } else {\r\n                setUrlInputError({\r\n                    content: 'Invalid url format',\r\n                    pointing: 'below',\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleLoadClick = () => {\r\n        runInAction(() => {\r\n            Settings.sidebar = 'loadUrls';\r\n            Settings.showSidebar = true;\r\n        });\r\n    };\r\n\r\n    const handleSaveClick = () => {\r\n        if (Settings.websites.length !== 0) {\r\n            runInAction(() => {\r\n                Settings.sidebar = 'saveUrls';\r\n                Settings.showSidebar = true;\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='internal-grid-content-single-row'>\r\n            <Form\r\n                size='large'\r\n                className='internal-grid-content-single-row-spread'\r\n            >\r\n                <Form.Field>\r\n                    <label>Test Pages</label>\r\n                    <VirtualGrid gridRef={gridRef} rowData={processed} />\r\n                </Form.Field>\r\n                <Form.Field>\r\n                    <Form.Input\r\n                        fluid\r\n                        label='Add Page Address'\r\n                        type='url'\r\n                        placeholder='type url and press enter...'\r\n                        value={urlInput}\r\n                        error={urlInputError}\r\n                        onChange={handleUrlChange}\r\n                        onKeyUp={handleUrlEnter}\r\n                    />\r\n                </Form.Field>\r\n                <Form.Group widths='equal'>\r\n                    <Form.Field>\r\n                        <label>Add Regional Top 100 Sites</label>\r\n                        <Segment textAlign='center'>\r\n                            <Button.Group size='mini' color='black'>\r\n                                <Button\r\n                                    type='button'\r\n                                    name='eu'\r\n                                    onClick={handleRegionClick}\r\n                                >\r\n                                    Europe\r\n                                </Button>\r\n                                <Button.Or />\r\n                                <Button\r\n                                    type='button'\r\n                                    name='us'\r\n                                    onClick={handleRegionClick}\r\n                                >\r\n                                    United States\r\n                                </Button>\r\n                            </Button.Group>\r\n                        </Segment>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>Manage Test Pages</label>\r\n                        <Segment textAlign='center'>\r\n                            <Button.Group size='mini' color='black'>\r\n                                <Button\r\n                                    type='button'\r\n                                    name='load'\r\n                                    onClick={handleLoadClick}\r\n                                >\r\n                                    Load\r\n                                </Button>\r\n                                <Button.Or />\r\n                                <Button\r\n                                    type='button'\r\n                                    name='save'\r\n                                    onClick={handleSaveClick}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                                <Button.Or />\r\n                                <Button\r\n                                    type='button'\r\n                                    name='clear'\r\n                                    onClick={handleRegionClick}\r\n                                >\r\n                                    Clear\r\n                                </Button>\r\n                            </Button.Group>\r\n                        </Segment>\r\n                    </Form.Field>\r\n                </Form.Group>\r\n            </Form>\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { Popup, Statistic } from 'semantic-ui-react';\r\nimport { Slider } from 'react-semantic-ui-range';\r\nimport { runInAction } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { useStores } from './../../hooks/useStores';\r\n\r\nexport const PageIterations = observer(() => {\r\n    const { Settings } = useStores();\r\n    const sliderSettings = {\r\n        start: Settings.pageIterations,\r\n        min: 1,\r\n        max: 5,\r\n        step: 1,\r\n        onChange: (value) => {\r\n            runInAction(() => (Settings.pageIterations = value));\r\n        },\r\n    };\r\n\r\n    return (\r\n        <div className='internal-grid-content-rows'>\r\n            <Popup\r\n                trigger={\r\n                    <Statistic\r\n                        label={\r\n                            Settings.pageIterations > 1\r\n                                ? 'Iterations'\r\n                                : 'Iteration'\r\n                        }\r\n                        value={Settings.pageIterations}\r\n                    />\r\n                }\r\n                basic\r\n                mouseEnterDelay={500}\r\n                size='tiny'\r\n            >\r\n                <Popup.Header>Page Iterations</Popup.Header>\r\n                <Popup.Content>\r\n                    Change state to make multiple visits per page, to average\r\n                    out temporary network blips from results.\r\n                </Popup.Content>\r\n            </Popup>\r\n\r\n            <Slider\r\n                value={Settings.pageIterations}\r\n                color='grey'\r\n                settings={sliderSettings}\r\n            />\r\n        </div>\r\n    );\r\n});\r\n","import React, { useState } from 'react';\r\nimport { Popup, Checkbox, Segment, Header } from 'semantic-ui-react';\r\nimport { runInAction } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { useStores } from './../../hooks/useStores';\r\n\r\nexport const WithCache = observer(() => {\r\n    const { Settings } = useStores();\r\n    const [checked, setChecked] = useState(Settings.withCache);\r\n    const handleToggle = () => {\r\n        runInAction(() => (Settings.withCache = !Settings.withCache));\r\n        setChecked(!checked);\r\n    };\r\n\r\n    return (\r\n        <div className='internal-grid-content-rows'>\r\n            <Popup\r\n                trigger={\r\n                    <Segment basic textAlign='center'>\r\n                        <Header as='h3'>\r\n                            <Header.Content>\r\n                                {Settings.withCache ? 'Enabled' : 'Disabled'}\r\n                            </Header.Content>\r\n                        </Header>\r\n                    </Segment>\r\n                }\r\n                basic\r\n                mouseEnterDelay={500}\r\n                size='tiny'\r\n            >\r\n                <Popup.Header>Browser Caching</Popup.Header>\r\n                <Popup.Content>\r\n                    Change state to allow browser to cache subresources from\r\n                    test pages\r\n                </Popup.Content>\r\n            </Popup>\r\n\r\n            <Segment textAlign='center'>\r\n                <Checkbox toggle onChange={handleToggle} checked={checked} />\r\n            </Segment>\r\n        </div>\r\n    );\r\n});\r\n","import React, { useState } from 'react';\r\nimport { Popup, Checkbox, Segment, Header } from 'semantic-ui-react';\r\nimport { runInAction } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { useStores } from './../../hooks/useStores';\r\n\r\nexport const WithServiceWorker = observer(() => {\r\n    const { Settings } = useStores();\r\n    const [checked, setChecked] = useState(Settings.withServiceWorker);\r\n    const handleToggle = () => {\r\n        runInAction(\r\n            () => (Settings.withServiceWorker = !Settings.withServiceWorker)\r\n        );\r\n        setChecked(!checked);\r\n    };\r\n\r\n    return (\r\n        <div className='internal-grid-content-rows'>\r\n            <Popup\r\n                trigger={\r\n                    <Segment basic textAlign='center'>\r\n                        <Header as='h3'>\r\n                            <Header.Content>\r\n                                {Settings.withServiceWorker\r\n                                    ? 'Allowed'\r\n                                    : 'Disallowed'}\r\n                            </Header.Content>\r\n                        </Header>\r\n                    </Segment>\r\n                }\r\n                basic\r\n                mouseEnterDelay={500}\r\n                size='tiny'\r\n            >\r\n                <Popup.Header>Service Workers</Popup.Header>\r\n                <Popup.Content>\r\n                    Change state to allow browser to run service workers on test\r\n                    pages\r\n                </Popup.Content>\r\n            </Popup>\r\n\r\n            <Segment textAlign='center'>\r\n                <Checkbox toggle onChange={handleToggle} checked={checked} />\r\n            </Segment>\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { Popup, Statistic } from 'semantic-ui-react';\r\nimport { Slider } from 'react-semantic-ui-range';\r\nimport { runInAction } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { useStores } from './../../hooks/useStores';\r\n\r\nexport const Screenshot = observer(() => {\r\n    const { Settings } = useStores();\r\n    const levelsMap = new Map();\r\n    levelsMap.set(200, 'very low');\r\n    levelsMap.set(400, 'low');\r\n    levelsMap.set(600, 'medium');\r\n    levelsMap.set(800, 'high');\r\n    levelsMap.set(1000, 'very high');\r\n\r\n    const sliderSettings = {\r\n        start: Settings.screenshotWidth,\r\n        min: 200,\r\n        max: 1000,\r\n        step: 200,\r\n        onChange: (value) => {\r\n            runInAction(() => (Settings.screenshotWidth = value));\r\n        },\r\n    };\r\n\r\n    return (\r\n        <div className='internal-grid-content-rows'>\r\n            <Popup\r\n                trigger={<Statistic size='mini' value={levelsMap.get(Settings.screenshotWidth)} />}\r\n                basic\r\n                mouseEnterDelay={500}\r\n                size='tiny'\r\n            >\r\n                <Popup.Header>Screenshot Resolution</Popup.Header>\r\n                <Popup.Content>\r\n                    Change state to increase saved screenshot quality level, within confines of browser window size\r\n                </Popup.Content>\r\n            </Popup>\r\n\r\n            <Slider value={Settings.screenshotWidth} color='grey' settings={sliderSettings} />\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport { runInAction } from 'mobx';\r\nimport { Responsive, WidthProvider } from 'react-grid-layout';\r\nimport { useStores } from './../hooks/useStores';\r\nimport { PageTitle } from './../components/pageTitle';\r\nimport { GridItem } from './../components/gridItem';\r\nimport { DefaultSettingsLayouts } from './../components/settings/settingsLayout';\r\nimport { Bandwidth } from '../components/settings/bandwidth';\r\nimport { Latency } from '../components/settings/latency';\r\nimport { WebsiteSelector } from './../components/settings/websiteSelector';\r\nimport { PageIterations } from './../components/settings/pageIterations';\r\nimport { WithCache } from './../components/settings/withCache';\r\nimport { WithServiceWorker } from './../components/settings/withServiceWorker';\r\nimport { Screenshot } from './../components/settings/screenshot';\r\n\r\n// <ResponsiveReactGridLayout> takes width to calculate positions on drag events.\r\n// WidthProvider can be used to automatically determine width upon initialization and window resize events.\r\nconst ResponsiveGridLayout = WidthProvider(Responsive);\r\n\r\nexport const SettingsPage = () => {\r\n    //get the settings to see if we have any saved layouts\r\n    const { Settings } = useStores();\r\n    //then we need to have a save action on the layout change\r\n    const handleLayoutChange = (currentLayout, allLayouts) => {\r\n        console.log(currentLayout);\r\n        runInAction(() => (Settings.settingsLayouts = allLayouts));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Container text textAlign='center'>\r\n                <PageTitle title='Settings' subtitle='Change test job settings' dividing={false} />\r\n            </Container>\r\n            <Container fluid>\r\n                <ResponsiveGridLayout\r\n                    className='layout'\r\n                    draggableHandle='.draggableHandle'\r\n                    layouts={\r\n                        Object.keys(Settings.settingsLayouts).length ? Settings.settingsLayouts : DefaultSettingsLayouts\r\n                    }\r\n                    breakpoints={{\r\n                        lg: 1200,\r\n                        md: 996,\r\n                        sm: 768,\r\n                        xs: 480,\r\n                        xxs: 0,\r\n                    }}\r\n                    cols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}\r\n                    margin={[10, 10]}\r\n                    containerPadding={[10, 10]}\r\n                    onLayoutChange={handleLayoutChange}\r\n                >\r\n                    <div key='latency'>\r\n                        <GridItem header='Latency'>\r\n                            <Latency />\r\n                        </GridItem>\r\n                    </div>\r\n                    <div key='webPageSelector'>\r\n                        <GridItem header='Web Pages'>\r\n                            <WebsiteSelector />\r\n                        </GridItem>\r\n                    </div>\r\n\r\n                    <div key='pageIterations'>\r\n                        <GridItem header='Page Iterations'>\r\n                            <PageIterations />\r\n                        </GridItem>\r\n                    </div>\r\n                    <div key='bandwidth'>\r\n                        <GridItem header='Bandwidth'>\r\n                            <Bandwidth />\r\n                        </GridItem>\r\n                    </div>\r\n                    <div key='screenshot'>\r\n                        <GridItem header='Screenshot Quality'>\r\n                            <Screenshot />\r\n                        </GridItem>\r\n                    </div>\r\n                    <div key='withCache'>\r\n                        <GridItem header='Cache Status'>\r\n                            <WithCache />\r\n                        </GridItem>\r\n                    </div>\r\n                    <div key='withServiceWorker'>\r\n                        <GridItem header='Service Workers'>\r\n                            <WithServiceWorker />\r\n                        </GridItem>\r\n                    </div>\r\n                </ResponsiveGridLayout>\r\n            </Container>\r\n        </>\r\n    );\r\n};\r\n","export const DefaultResultsLayouts = {\r\n    // 12 columns\r\n    lg: [\r\n        { i: 'timings', w: 6, h: 1, x: 0, y: 0, isBounded: true },\r\n        { i: 'headerLatency', w: 3, h: 2, x: 6, y: 0, isBounded: true },\r\n        { i: 'dataUsage', w: 3, h: 2, x: 9, y: 0, isBounded: true },\r\n        { i: 'progress', w: 6, h: 1, x: 0, y: 1, isBounded: true },\r\n        { i: 'pageTable', w: 9, h: 5, x: 0, y: 2, isBounded: true },\r\n        { i: 'console', w: 3, h: 5, x: 9, y: 2, isBounded: true },\r\n        { i: 'metricsTable', w: 9, h: 6, x: 0, y: 7, isBounded: true },\r\n        { i: 'loadChart', w: 5, h: 3, x: 7, y: 7, isBounded: true },\r\n        { i: 'requestChart', w: 5, h: 3, x: 7, y: 10, isBounded: true },\r\n    ],\r\n    // 10 columns\r\n    md: [\r\n        { w: 6, h: 1, x: 0, y: 0, i: 'timings', isBounded: true },\r\n        { w: 3, h: 2, x: 3, y: 2, i: 'headerLatency', isBounded: true },\r\n        { w: 3, h: 2, x: 0, y: 2, i: 'dataUsage', isBounded: true },\r\n        { w: 6, h: 1, x: 0, y: 1, i: 'progress', isBounded: true },\r\n        { w: 10, h: 5, x: 0, y: 4, i: 'pageTable', isBounded: true },\r\n        { w: 4, h: 4, x: 6, y: 0, i: 'console', isBounded: true },\r\n        { w: 10, h: 5, x: 0, y: 12, i: 'metricsTable', isBounded: true },\r\n        { w: 5, h: 3, x: 0, y: 9, i: 'loadChart', isBounded: true },\r\n        { w: 5, h: 3, x: 5, y: 9, i: 'requestChart', isBounded: true },\r\n    ],\r\n    // 6 columns\r\n    sm: [\r\n        { w: 6, h: 1, x: 0, y: 0, i: 'timings', isBounded: true },\r\n        { w: 2, h: 1, x: 2, y: 1, i: 'headerLatency', isBounded: true },\r\n        { w: 2, h: 1, x: 4, y: 1, i: 'dataUsage', isBounded: true },\r\n        { w: 2, h: 1, x: 0, y: 1, i: 'progress', isBounded: true },\r\n        { w: 6, h: 5, x: 0, y: 4, i: 'pageTable', isBounded: true },\r\n        { w: 6, h: 2, x: 0, y: 2, i: 'console', isBounded: true },\r\n        { w: 6, h: 5, x: 0, y: 11, i: 'metricsTable', isBounded: true },\r\n        { w: 3, h: 2, x: 0, y: 9, i: 'loadChart', isBounded: true },\r\n        { w: 3, h: 2, x: 3, y: 9, i: 'requestChart', isBounded: true },\r\n    ],\r\n    // 4 columns\r\n    xs: [\r\n        { w: 4, h: 2, x: 0, y: 0, i: 'timings', isBounded: true },\r\n        { w: 2, h: 2, x: 0, y: 2, i: 'headerLatency', isBounded: true },\r\n        { w: 2, h: 2, x: 2, y: 2, i: 'dataUsage', isBounded: true },\r\n        { w: 4, h: 1, x: 0, y: 4, i: 'progress', isBounded: true },\r\n        { w: 4, h: 5, x: 0, y: 5, i: 'pageTable', isBounded: true },\r\n        { w: 4, h: 2, x: 0, y: 10, i: 'console', isBounded: true },\r\n        { w: 4, h: 5, x: 0, y: 12, i: 'metricsTable', isBounded: true },\r\n        { w: 4, h: 3, x: 0, y: 17, i: 'loadChart', isBounded: true },\r\n        { w: 4, h: 3, x: 0, y: 20, i: 'requestChart', isBounded: true },\r\n    ],\r\n    // 2 columns\r\n    xxs: [\r\n        { w: 2, h: 2, x: 0, y: 0, i: 'timings', isBounded: true },\r\n        { w: 1, h: 2, x: 0, y: 2, i: 'headerLatency', isBounded: true },\r\n        { w: 1, h: 2, x: 1, y: 2, i: 'dataUsage', isBounded: true },\r\n        { w: 2, h: 1, x: 0, y: 4, i: 'progress', isBounded: true },\r\n        { w: 2, h: 5, x: 0, y: 5, i: 'pageTable', isBounded: true },\r\n        { w: 2, h: 3, x: 0, y: 10, i: 'console', isBounded: true },\r\n        { w: 2, h: 6, x: 0, y: 19, i: 'metricsTable', isBounded: true },\r\n        { w: 2, h: 3, x: 0, y: 13, i: 'loadChart', isBounded: true },\r\n        { w: 2, h: 3, x: 0, y: 16, i: 'requestChart', isBounded: true },\r\n    ],\r\n};\r\n","import React from 'react';\r\nimport { Popup, Statistic } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react';\r\nimport { useStores } from '../../hooks/useStores';\r\n\r\nexport const HeaderLatency = observer(() => {\r\n    //get the settings to see if we have any saved layouts\r\n    const { JobStore } = useStores();\r\n    //get the activeJob\r\n    const activeJob = JobStore.jobs.length\r\n        ? JobStore.jobs[JobStore.activeIndex]\r\n        : JobStore.placeholderJob;\r\n    return (\r\n        <div className='internal-grid-content-single-row'>\r\n            <Popup\r\n                trigger={\r\n                    <Statistic\r\n                        label='ms'\r\n                        value={activeJob.headerTimingsAverage}\r\n                    />\r\n                }\r\n                basic\r\n                mouseEnterDelay={500}\r\n                size='tiny'\r\n            >\r\n                <Popup.Header>Average Header Latency</Popup.Header>\r\n                <Popup.Content>\r\n                    Live calculated average for all resources of the time taken\r\n                    to receive a header response.\r\n                </Popup.Content>\r\n            </Popup>\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { Popup, Statistic } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react';\r\nimport { useStores } from '../../hooks/useStores';\r\n\r\nexport const DataUsage = observer(() => {\r\n    //get the settings to see if we have any saved layouts\r\n    const { JobStore } = useStores();\r\n    //get the activeJob\r\n    const activeJob = JobStore.jobs.length\r\n        ? JobStore.jobs[JobStore.activeIndex]\r\n        : JobStore.placeholderJob;\r\n    return (\r\n        <div className='internal-grid-content-single-row'>\r\n            <Popup\r\n                trigger={\r\n                    <Statistic\r\n                        label='Megabytes'\r\n                        value={activeJob.dataUsageAverage}\r\n                    />\r\n                }\r\n                basic\r\n                mouseEnterDelay={500}\r\n                size='tiny'\r\n            >\r\n                <Popup.Header>Average Page Weight</Popup.Header>\r\n                <Popup.Content>\r\n                    Live calculated average of total data transferred to render\r\n                    completed pages.\r\n                </Popup.Content>\r\n            </Popup>\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { Progress } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react';\r\nimport { useStores } from '../../hooks/useStores';\r\n\r\nexport const ProgressBar = observer(() => {\r\n    //get the settings to see if we have any saved layouts\r\n    const { JobStore } = useStores();\r\n    //get the activeJob\r\n    const activeJob = JobStore.jobs.length ? JobStore.jobs[JobStore.activeIndex] : JobStore.placeholderJob;\r\n    //get the current page count\r\n    const pageCount = activeJob.pages.length;\r\n    //then we will want to get the number of urls in the settings of the active job as well, using 20 as default on placeholder use\r\n    const pageTarget = activeJob.settings.websites ? activeJob.settings.websites.length : 20;\r\n\r\n    return (\r\n        <div className='internal-grid-content-single-row'>\r\n            <Progress percent={Math.round((pageCount / pageTarget) * 100)} autoSuccess progress />\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { BrowserDetect } from '../utils/browserDetect';\r\n\r\nexport const browserContext = React.createContext({\r\n    Browser: new BrowserDetect(),\r\n});\r\n","import React from 'react';\r\nimport { browserContext } from './../contexts/browserContext';\r\n\r\nexport const useBrowser = () => React.useContext(browserContext);\r\n","import React, { useMemo, useEffect } from 'react';\r\nimport { Table, Menu, Icon, Select } from 'semantic-ui-react';\r\nimport { useTable, useSortBy, usePagination } from 'react-table';\r\nimport { CSVLink } from 'react-csv';\r\n\r\nimport './table.css';\r\n\r\n//we want to split the table props from our other props, so we can just pass the table props to react-table\r\nexport const SemanticTable = ({ headers, dataset, rowClick, mostRecent, filename, ...props }) => {\r\n    //make sure we memo-ize the incoming data so we can work it\r\n    const columns = useMemo(() => headers, [headers]);\r\n    const data = useMemo(() => dataset, [dataset]);\r\n\r\n    //the first line of the csv files is easy as we only need to grab the headers, changing the properties\r\n    const csvHeaders = headers.map((item) => ({\r\n        label: item.Header,\r\n        key: item.accessor,\r\n    }));\r\n\r\n    // Use the state and functions returned from useTable to build your UI\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        visibleColumns,\r\n        prepareRow,\r\n        // Instead of using 'rows', we'll use page, which has only the rows for the active page\r\n        page,\r\n        canPreviousPage,\r\n        canNextPage,\r\n        pageOptions,\r\n        pageCount,\r\n        gotoPage,\r\n        nextPage,\r\n        previousPage,\r\n        setPageSize,\r\n        state: { pageIndex, pageSize },\r\n    } = useTable(\r\n        { columns, data, initialState: { pageIndex: 0 }, autoResetPage: !mostRecent }, //we need to set autoResetPage to false to prevent pageIndex going to 0 when data changes\r\n        useSortBy,\r\n        usePagination\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (pageCount > 1 && mostRecent) {\r\n            //this only works in conjunction with autoResetPage set to false\r\n            gotoPage(pageCount - 1);\r\n        }\r\n    }, [pageCount, mostRecent, gotoPage]);\r\n\r\n    return (\r\n        <div className='tableContainer'>\r\n            <div className='tableWrapper'>\r\n                <Table {...getTableProps(props)}>\r\n                    {/* build the table header */}\r\n                    <Table.Header>\r\n                        {\r\n                            // Loop over the header rows\r\n                            headerGroups.map((headerGroup) => (\r\n                                // Apply the header row props\r\n                                <Table.Row {...headerGroup.getHeaderGroupProps()}>\r\n                                    {\r\n                                        // Loop over the headers in each row\r\n                                        headerGroup.headers.map((column) => (\r\n                                            // Apply the header cell props\r\n\r\n                                            <Table.HeaderCell\r\n                                                {...column.getHeaderProps(\r\n                                                    // Add the sorting props to control sorting.\r\n                                                    column.getSortByToggleProps()\r\n                                                )}\r\n                                                /* Add a sort direction indicator, using the sort properties of the column and the semantic ui sorted property */\r\n                                                sorted={\r\n                                                    column.isSorted\r\n                                                        ? column.isSortedDesc\r\n                                                            ? 'descending'\r\n                                                            : 'ascending'\r\n                                                        : null\r\n                                                }\r\n                                            >\r\n                                                {\r\n                                                    // Render the header\r\n                                                    column.render('Header')\r\n                                                }\r\n                                            </Table.HeaderCell>\r\n                                        ))\r\n                                    }\r\n                                </Table.Row>\r\n                            ))\r\n                        }\r\n                    </Table.Header>\r\n\r\n                    {/* Apply the table body props */}\r\n                    <Table.Body {...getTableBodyProps()}>\r\n                        {\r\n                            // Loop over the table rows\r\n                            page.map((row) => {\r\n                                // Prepare the row for display\r\n                                prepareRow(row);\r\n                                return (\r\n                                    // Apply the row props\r\n                                    <Table.Row {...row.getRowProps()} onClick={() => rowClick(row.original)}>\r\n                                        {\r\n                                            // Loop over the rows cells\r\n                                            row.cells.map((cell) => {\r\n                                                // Apply the cell props\r\n                                                return (\r\n                                                    <Table.Cell {...cell.getCellProps()}>\r\n                                                        {\r\n                                                            // Render the cell contents\r\n                                                            cell.render('Cell')\r\n                                                        }\r\n                                                    </Table.Cell>\r\n                                                );\r\n                                            })\r\n                                        }\r\n                                    </Table.Row>\r\n                                );\r\n                            })\r\n                        }\r\n                    </Table.Body>\r\n\r\n                    {dataset.length > 10 && (\r\n                        <Table.Footer>\r\n                            <Table.Row>\r\n                                <Table.HeaderCell colSpan={visibleColumns.length.toString()}>\r\n                                    {filename.length ? (\r\n                                        <Menu floated='left'>\r\n                                            <Menu.Item as='a'>\r\n                                                <CSVLink data={data} headers={csvHeaders} filename={`${filename}.csv`}>\r\n                                                    CSV\r\n                                                </CSVLink>\r\n                                            </Menu.Item>\r\n                                        </Menu>\r\n                                    ) : null}\r\n\r\n                                    <Menu floated='right' pagination>\r\n                                        <Menu.Item as='a' icon onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n                                            <Icon name='chevron left' />\r\n                                            <Icon name='chevron left' />\r\n                                        </Menu.Item>\r\n                                        <Menu.Item\r\n                                            as='a'\r\n                                            icon\r\n                                            onClick={() => previousPage()}\r\n                                            disabled={!canPreviousPage}\r\n                                        >\r\n                                            <Icon name='chevron left' />\r\n                                        </Menu.Item>\r\n                                        <Menu.Item as='a' icon onClick={() => nextPage()} disabled={!canNextPage}>\r\n                                            <Icon name='chevron right' />\r\n                                        </Menu.Item>\r\n                                        <Menu.Item\r\n                                            as='a'\r\n                                            icon\r\n                                            onClick={() => gotoPage(pageCount - 1)}\r\n                                            disabled={!canNextPage}\r\n                                        >\r\n                                            <Icon name='chevron right' />\r\n                                            <Icon name='chevron right' />\r\n                                        </Menu.Item>\r\n                                        <Menu.Item as='a'>\r\n                                            Page {pageIndex + 1} of {pageOptions.length}\r\n                                        </Menu.Item>\r\n\r\n                                        <Select\r\n                                            item\r\n                                            upward={true}\r\n                                            text={`Show ${pageSize}`}\r\n                                            onChange={(e, { value }) => {\r\n                                                setPageSize(Number(value));\r\n                                            }}\r\n                                            options={paginationOptions}\r\n                                        />\r\n                                    </Menu>\r\n                                </Table.HeaderCell>\r\n                            </Table.Row>\r\n                        </Table.Footer>\r\n                    )}\r\n                </Table>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst paginationOptions = [\r\n    { key: '10', value: '10', text: 'Show 10' },\r\n    { key: '20', value: '20', text: 'Show 20' },\r\n    { key: '30', value: '30', text: 'Show 30' },\r\n    { key: '40', value: '40', text: 'Show 40' },\r\n    { key: '50', value: '50', text: 'Show 50' },\r\n];\r\n\r\nSemanticTable.defaultProps = {\r\n    //create the default empty columns, data\r\n    //A table can reduce its complexity to increase readability.\r\n    basic: false,\r\n    //A table may be divided each row into separate cells.\r\n    celled: false,\r\n    //A table can be collapsing, taking up only as much space as its rows.\r\n    collapsing: false,\r\n    //A table can be given a color to distinguish it from other tables.\r\n    //red, orange, yellow, olive, green, teal, blue, violet, purple, pink, brown, grey, black\r\n    color: '',\r\n    //A table may sometimes need to be more compact to make more rows visible at a time.\r\n    compact: false,\r\n    //A table may be formatted to emphasize a first column that defines a rows content.\r\n    definition: false,\r\n    //A table can use fixed a special faster form of table rendering that does not resize table cells based on content\r\n    fixed: false,\r\n    //A table's colors can be inverted.\r\n    inverted: false,\r\n    //A table may sometimes need to be more padded for legibility.\r\n    padded: false,\r\n    //A table can specify that its cell contents should remain on a single line and not wrap.\r\n    singleLine: false,\r\n    //A table can also be small or large.\r\n    size: 'small',\r\n    //A table may allow a user to sort contents by clicking on a table header.\r\n    sortable: false,\r\n    //A table can specify how it stacks table content responsively.\r\n    stackable: false,\r\n    unstackable: true,\r\n    //A table can stripe alternate rows of content with a darker color to increase contrast.\r\n    striped: false,\r\n    //A table can be formatted to display complex structured data.\r\n    structured: false,\r\n    //A table can adjust its text alignment.\r\n    textAlign: 'center',\r\n    //then we have a param to show the most recent entries in pagination\r\n    mostRecent: false,\r\n    //then we have the row click handler as empty function by default\r\n    rowClick: () => {},\r\n    //then a default prop for filename\r\n    filename: 'table.csv',\r\n};\r\n","import React from 'react';\r\nimport { runInAction } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { useStores } from '../../hooks/useStores';\r\nimport { useBrowser } from '../../hooks/useBrowser';\r\nimport { SemanticTable } from '../tables/table';\r\n\r\nexport const ActivePageTable = observer(() => {\r\n    //get the settings to see if we have any saved layouts\r\n    const { JobStore, Settings } = useStores();\r\n    //get the activeJob, if length, otherwise the placeholder will do fine\r\n    const activeJob = JobStore.jobs.length ? JobStore.jobs[JobStore.activeIndex] : JobStore.placeholderJob;\r\n    //get the browser details for the csv file name\r\n    const { Browser } = useBrowser();\r\n\r\n    //then we have the custom row click\r\n    const handleRowClick = (row) => {\r\n        //here we can use the row info to search our pages and then provide further information, such as showing the screenshot in the sidebar\r\n        console.log(row);\r\n        runInAction(() => {\r\n            Settings.pageDisplayIndex = activeJob.pages.findIndex((page) => page.url === row.url);\r\n            Settings.sidebar = 'showPageDetail';\r\n            Settings.showSidebar = true;\r\n        });\r\n    };\r\n\r\n    // columns are headers with the accessor, referring to the \"key\" in the data\r\n    const columns = [\r\n        { Header: 'Page Url', accessor: 'url' },\r\n        { Header: 'Dom Loaded (ms)', accessor: 'dclAverage' },\r\n        { Header: 'Page Complete (ms)', accessor: 'completeAverage' },\r\n        { Header: 'Data Usage (bytes)', accessor: 'dataUsageAverage' },\r\n        { Header: 'Headers (ms)', accessor: 'headerTimingsAverage' },\r\n        { Header: 'Image Load (bytes)', accessor: 'imageLoadAverage' },\r\n        { Header: 'Images', accessor: 'imageRequestsAverage' },\r\n        { Header: 'Video Load (bytes)', accessor: 'mediaLoadAverage' },\r\n        { Header: 'Videos', accessor: 'mediaRequestsAverage' },\r\n        { Header: 'Font Load (bytes)', accessor: 'fontLoadAverage' },\r\n        { Header: 'Fonts', accessor: 'fontRequestsAverage' },\r\n        { Header: 'JS Load (bytes)', accessor: 'scriptLoadAverage' },\r\n        { Header: 'Scripts', accessor: 'scriptRequestsAverage' },\r\n        { Header: 'CSS Load (bytes)', accessor: 'cssLoadAverage' },\r\n        { Header: 'Stylesheets', accessor: 'cssRequestsAverage' },\r\n    ];\r\n\r\n    return (\r\n        <div className='internal-grid-content-single-row'>\r\n            <SemanticTable\r\n                headers={columns}\r\n                dataset={activeJob.pageTableData}\r\n                striped={true}\r\n                compact={true}\r\n                sortable={true}\r\n                selectable={true}\r\n                rowClick={handleRowClick}\r\n                mostRecent={true}\r\n                filename={`${Settings.toString}_${Browser.name}_${Browser.os}${Browser.os_version}`}\r\n            />\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { runInAction } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { useStores } from '../../hooks/useStores';\r\nimport { useBrowser } from '../../hooks/useBrowser';\r\nimport { SemanticTable } from '../tables/table';\r\n\r\nexport const ActiveMetricsTable = observer(() => {\r\n    //get the settings to see if we have any saved layouts\r\n    const { JobStore, Settings } = useStores();\r\n    //get the activeJob, if length, otherwise the placeholder will do fine\r\n    const activeJob = JobStore.jobs.length ? JobStore.jobs[JobStore.activeIndex] : JobStore.placeholderJob;\r\n    //get the browser details for the csv file name\r\n    const { Browser } = useBrowser();\r\n\r\n    //then we have the custom row click\r\n    const handleRowClick = (row) => {\r\n        //here we can use the row info to search our pages and then provide further information, such as showing the screenshot in the sidebar\r\n        console.log(row);\r\n        runInAction(() => {\r\n            Settings.pageDisplayIndex = activeJob.pages.findIndex((page) => page.url === row.url);\r\n            Settings.sidebar = 'showPageDetail';\r\n            Settings.showSidebar = true;\r\n        });\r\n    };\r\n\r\n    // columns are headers with the accessor, referring to the \"key\" in the data\r\n    const columns = [\r\n        { Header: 'Page Url', accessor: 'url' },\r\n        { Header: 'Documents', accessor: 'metricsDocumentsAverage' },\r\n        { Header: 'Resources', accessor: 'metricsResourcesAverage' },\r\n        { Header: 'Frames', accessor: 'metricsFramesAverage' },\r\n        { Header: 'Advertising Frames', accessor: 'metricsAdvertisingFramesAverage' },\r\n        { Header: 'Used Memory (bytes)', accessor: 'metricsUsedHeapAverage' },\r\n        { Header: 'Total Memory (bytes)', accessor: 'metricsTotalHeapAverage' },\r\n    ];\r\n\r\n    return (\r\n        <div className='internal-grid-content-single-row'>\r\n            <SemanticTable\r\n                headers={columns}\r\n                dataset={activeJob.pageMetricsTableData}\r\n                striped={true}\r\n                compact={true}\r\n                sortable={true}\r\n                selectable={true}\r\n                rowClick={handleRowClick}\r\n                mostRecent={true}\r\n                filename={`${Settings.toString}_${Browser.name}_${Browser.os}${Browser.os_version}`}\r\n            />\r\n        </div>\r\n    );\r\n});\r\n","import React, { useLayoutEffect, useRef, useContext, memo } from 'react';\r\nimport { areEqual } from 'react-window';\r\nimport { VirtualListContext } from './virtualList';\r\n\r\n//we use react memo in case the items passed to the list row as message are complex html\r\nexport const VirtualListRow = memo(({ index, message, styleErrorText }) => {\r\n    //here we use context to be set the size of the row and also so we can listen to changes on the window and any other size changes\r\n    const { setSize, windowWidth } = useContext(VirtualListContext);\r\n    //simple ref so we can imperatively get hold of height in hook\r\n    const root = useRef();\r\n    //use layout effect This runs synchronously immediately after React has performed all DOM mutations. This can be useful if you need to make DOM measurements\r\n    useLayoutEffect(() => {\r\n        //then we use the context function to pass the row size to the parent list\r\n        setSize(index, root.current.getBoundingClientRect().height);\r\n        //any changes in windowWidth or the container width may require a repaint\r\n    }, [index, setSize, windowWidth]);\r\n\r\n    return (\r\n        <div\r\n            ref={root}\r\n            className={index % 2 ? 'ListItemOdd' : 'ListItemEven'}\r\n            style={{\r\n                color: styleErrorText && message.includes('Error') ? '#d02712' : 'unset',\r\n            }}\r\n            //we use dangerously set html because we know where the message is coming from and we can then include links and styling in lists\r\n            dangerouslySetInnerHTML={{ __html: message }}\r\n        />\r\n    );\r\n    //Custom comparison function for React.memo.\r\n}, areEqual);\r\n","import React, { createContext, useRef, useCallback, useLayoutEffect } from 'react';\r\nimport { VariableSizeList as List } from 'react-window';\r\nimport AutoSizer from 'react-virtualized-auto-sizer';\r\nimport { useWindowSize } from './../../hooks/useWindowResize';\r\nimport { VirtualListRow } from './virtualListRow';\r\n\r\n//import our styling\r\nimport './virtualList.css';\r\n\r\n//set up the context provider to share the setSize function and changes to window or container width\r\nexport const VirtualListContext = createContext({});\r\n\r\n//we have an incoming list ref so the parent can control the scrolling of the list\r\nexport const VirtualList = ({ listRef, rowData, styleErrorText }) => {\r\n    //we need to keep a memory of the row heights which we keep in a lookup object\r\n    const sizeMap = useRef({});\r\n    //then we have a function that we keep in memory that allows for the updating of the row height\r\n    const setSize = useCallback((index, size) => {\r\n        //spread operator to update object\r\n        sizeMap.current = { ...sizeMap.current, [index]: size };\r\n    }, []);\r\n    //then we have the function to get the size of the row that we pass to the list\r\n    const getSize = useCallback((index) => {\r\n        return sizeMap.current[index] || 50;\r\n    }, []);\r\n    //then we have the custom hook that is listening for changes in window size\r\n    const [windowWidth] = useWindowSize();\r\n    //then when we load we need to reset the list so all the heights are set appropriately\r\n    useLayoutEffect(() => {\r\n        if (listRef.current) {\r\n            //VariableSizeList caches offsets and measurements for each index for performance purposes.\r\n            //This method clears that cached data for all items after (and including) the specified index.\r\n            //It should be called whenever a item's size changes.\r\n            listRef.current.resetAfterIndex(0);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <VirtualListContext.Provider value={{ setSize, windowWidth }}>\r\n            {/* This is required to make the virtual list autosize interact with flexbox parents */}\r\n            <div className='listContainer'>\r\n                {/* No point in showing the autosized list until we have data */}\r\n                {rowData.length > 0 && (\r\n                    <AutoSizer>\r\n                        {/* Auto-sizer provides height and width */}\r\n                        {({ height, width }) => (\r\n                            <List\r\n                                className='List'\r\n                                height={height}\r\n                                itemCount={rowData.length}\r\n                                itemSize={getSize}\r\n                                width={width}\r\n                                ref={listRef}\r\n                            >\r\n                                {({ index, style }) => (\r\n                                    // react-window work by absolutely positioning the list items (via an inline style), so don't forget to attach it to the DOM element you render!\r\n                                    <div style={style}>\r\n                                        {/* Other styles added at component level */}\r\n                                        <VirtualListRow\r\n                                            index={index}\r\n                                            message={rowData[index]}\r\n                                            styleErrorText={styleErrorText}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </List>\r\n                        )}\r\n                    </AutoSizer>\r\n                )}\r\n            </div>\r\n        </VirtualListContext.Provider>\r\n    );\r\n};\r\n\r\nVirtualList.defaultProps = {\r\n    listRef: null,\r\n    containerRef: null,\r\n    rowData: [],\r\n    styleErrorText: false,\r\n};\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { useStores } from './../../hooks/useStores';\r\nimport { VirtualList } from './../lists/virtualList';\r\n\r\nexport const ConsoleList = observer(() => {\r\n    //get the settings to see if we have any saved layouts\r\n    const { JobStore } = useStores();\r\n    //get the activeJob\r\n    const activeJob = JobStore.jobs.length ? JobStore.jobs[JobStore.activeIndex] : JobStore.placeholderJob;\r\n    //we need a reference to the child list component so we can scroll\r\n    const listRef = useRef(null);\r\n    //then we need to scroll to the bottom of the list each time it comes in\r\n    useEffect(() => {\r\n        if (listRef.current) {\r\n            // You can programatically scroll to a item within a List.\r\n            listRef.current.scrollToItem(activeJob.consoleMessages.length - 1, 'end');\r\n        }\r\n        //it is the properties of the observed item that are observable, so we have to monitor length rather than console messages object\r\n    }, [activeJob.consoleMessages.length]);\r\n\r\n    return (\r\n        <div className='internal-grid-content-single-row'>\r\n            <VirtualList listRef={listRef} rowData={activeJob.consoleMessages} styleErrorText={true} />\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { Icon, Step } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react';\r\nimport { useStores } from '../../hooks/useStores';\r\n\r\nexport const Timings = observer(() => {\r\n    //get the settings to see if we have any saved layouts\r\n    const { JobStore } = useStores();\r\n    //get the activeJob\r\n    const activeJob = JobStore.jobs.length\r\n        ? JobStore.jobs[JobStore.activeIndex]\r\n        : JobStore.placeholderJob;\r\n    return (\r\n        <div className='internal-grid-content-single-row'>\r\n            <Step.Group>\r\n                <Step>\r\n                    <Icon name='th' />\r\n                    <Step.Content>\r\n                        <Step.Title>Dom Content Loaded</Step.Title>\r\n                        <Step.Description>\r\n                            {activeJob.dclAverage}ms\r\n                        </Step.Description>\r\n                    </Step.Content>\r\n                </Step>\r\n\r\n                <Step>\r\n                    <Icon name='images outline' />\r\n                    <Step.Content>\r\n                        <Step.Title>Page Complete</Step.Title>\r\n                        <Step.Description>\r\n                            {activeJob.completeAverage}ms\r\n                        </Step.Description>\r\n                    </Step.Content>\r\n                </Step>\r\n            </Step.Group>\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport { useStores } from '../../hooks/useStores';\r\n\r\nexport const LoadChart = observer((props) => {\r\n    //get the settings to see if we have any saved layouts\r\n    const { JobStore } = useStores();\r\n    //get the activeJob\r\n    const activeJob = JobStore.jobs.length\r\n        ? JobStore.jobs[JobStore.activeIndex]\r\n        : JobStore.placeholderJob;\r\n    return (\r\n        <div className='internal-grid-content-single-row'>\r\n            <div className='chartWrappper'>\r\n                <Doughnut\r\n                    data={activeJob.resourceLoadData}\r\n                    options={props.options}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nLoadChart.defaultProps = {\r\n    options: {\r\n        responsive: true,\r\n        cutoutPercentage: 75,\r\n        tooltips: {\r\n            enabled: true,\r\n            mode: 'single',\r\n            callbacks: {\r\n                label: (item, data) =>\r\n                    ` ${data.datasets[item.datasetIndex].data[item.index]} MB`,\r\n            },\r\n        },\r\n        animation: {\r\n            animateScale: true,\r\n            animateRotate: true,\r\n        },\r\n    },\r\n    legend: {\r\n        position: 'top',\r\n    },\r\n};\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Polar } from 'react-chartjs-2';\r\nimport { useStores } from '../../hooks/useStores';\r\n\r\nexport const RequestChart = observer((props) => {\r\n    //get the settings to see if we have any saved layouts\r\n    const { JobStore } = useStores();\r\n    //get the activeJob\r\n    const activeJob = JobStore.jobs.length\r\n        ? JobStore.jobs[JobStore.activeIndex]\r\n        : JobStore.placeholderJob;\r\n    return (\r\n        <div className='internal-grid-content-single-row'>\r\n            <div className='chartWrappper'>\r\n                <Polar data={activeJob.requestData} options={props.options} />\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nRequestChart.defaultProps = {\r\n    options: {\r\n        responsive: true,\r\n        animation: {\r\n            animateScale: true,\r\n            animateRotate: true,\r\n        },\r\n    },\r\n    legend: {\r\n        position: 'top',\r\n    },\r\n};\r\n","import React from 'react';\r\nimport { runInAction } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'semantic-ui-react';\r\nimport { useStores } from './../../hooks/useStores';\r\nimport { SendChromeMessage } from './../../utils/chromeFunctions';\r\n\r\nexport const ActionButtons = observer(() => {\r\n    //get the settings so we can update paused state\r\n    const { JobStore, Settings } = useStores();\r\n    //handle the button clicks\r\n    const handleButtonClick = (_, { name }) => {\r\n        switch (name) {\r\n            case 'Pause':\r\n                SendChromeMessage({ command: 'pauseTest' });\r\n                runInAction(() => (Settings.isPaused = true));\r\n                break;\r\n            case 'Resume':\r\n                SendChromeMessage({ command: 'resumeTest' });\r\n                runInAction(() => (Settings.isPaused = false));\r\n                break;\r\n            case 'Abort':\r\n                //first we send the message to abort the test, which should then fire null into the mobx listener streams\r\n                SendChromeMessage({ command: 'abortTest' });\r\n                //then we need to reset the listeners after a short delay so we can get the abort message\r\n                setTimeout(() => runInAction(() => JobStore.resetListeners()), 100);\r\n                break;\r\n            default:\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Button.Group floated='right' size='mini' style={{ marginRight: '10px' }}>\r\n            <Button name='Pause' title='Click to pause between pages' color='black' onClick={handleButtonClick}>\r\n                Pause\r\n            </Button>\r\n            <Button.Or />\r\n            <Button\r\n                name='Resume'\r\n                title='Click to resume next page'\r\n                color='black'\r\n                positive={Settings.isPaused}\r\n                onClick={handleButtonClick}\r\n            >\r\n                Resume\r\n            </Button>\r\n            <Button.Or />\r\n            <Button name='Abort' title='Click to abort test immediately' negative onClick={handleButtonClick}>\r\n                Abort\r\n            </Button>\r\n        </Button.Group>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport { runInAction } from 'mobx';\r\nimport { Responsive, WidthProvider } from 'react-grid-layout';\r\nimport { useStores } from './../hooks/useStores';\r\nimport { DefaultResultsLayouts } from './../components/results/resultsLayout';\r\nimport { GridItem } from './../components/gridItem';\r\nimport { PageTitle } from './../components/pageTitle.js';\r\nimport { HeaderLatency } from '../components/results/headerLatency';\r\nimport { DataUsage } from '../components/results/dataUsage';\r\nimport { ProgressBar } from './../components/results/progress';\r\nimport { ActivePageTable } from '../components/results/activePageTable';\r\nimport { ActiveMetricsTable } from '../components/results/activeMetricsTable';\r\nimport { ConsoleList } from './../components/results/consoleList';\r\nimport { Timings } from './../components/results/timings';\r\nimport { LoadChart } from '../components/charts/loadChart';\r\nimport { RequestChart } from '../components/charts/requestChart';\r\nimport { ActionButtons } from '../components/results/actionButtons';\r\n\r\n// <ResponsiveReactGridLayout> takes width to calculate positions on drag events.\r\n// WidthProvider can be used to automatically determine width upon initialization and window resize events.\r\nconst ResponsiveGridLayout = WidthProvider(Responsive);\r\n\r\nexport const Results = () => {\r\n    //get the settings to see if we have any saved layouts\r\n    const { JobStore, Settings } = useStores();\r\n    //get the activeJob\r\n    const activeJob = JobStore.jobs.length ? JobStore.jobs[JobStore.activeIndex] : JobStore.placeholderJob;\r\n    //then we need to have a save action on the layout change\r\n    const handleLayoutChange = (currentLayout, allLayouts) => {\r\n        console.log(currentLayout);\r\n        runInAction(() => (Settings.resultsLayouts = allLayouts));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ActionButtons />\r\n            <Container text textAlign='center'>\r\n                <PageTitle\r\n                    title='Results'\r\n                    subtitle={`Started: ${new Date(activeJob.createdAt).toLocaleString()}`}\r\n                    dividing={false}\r\n                />\r\n            </Container>\r\n            <Container fluid>\r\n                <ResponsiveGridLayout\r\n                    className='layout'\r\n                    draggableHandle='.draggableHandle'\r\n                    layouts={\r\n                        Object.keys(Settings.resultsLayouts).length ? Settings.resultsLayouts : DefaultResultsLayouts\r\n                    }\r\n                    breakpoints={{\r\n                        lg: 1200,\r\n                        md: 996,\r\n                        sm: 768,\r\n                        xs: 480,\r\n                        xxs: 0,\r\n                    }}\r\n                    cols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}\r\n                    margin={[10, 10]}\r\n                    containerPadding={[10, 10]}\r\n                    onLayoutChange={handleLayoutChange}\r\n                >\r\n                    <div key='timings'>\r\n                        <GridItem header='Timings'>\r\n                            <Timings />\r\n                        </GridItem>\r\n                    </div>\r\n                    <div key='headerLatency'>\r\n                        <GridItem header='Header Latency'>\r\n                            <HeaderLatency />\r\n                        </GridItem>\r\n                    </div>\r\n                    <div key='dataUsage'>\r\n                        <GridItem header='Page Weight'>\r\n                            <DataUsage />\r\n                        </GridItem>\r\n                    </div>\r\n                    <div key='progress'>\r\n                        <GridItem header='Progress'>\r\n                            <ProgressBar />\r\n                        </GridItem>\r\n                    </div>\r\n                    <div key='pageTable'>\r\n                        <GridItem header='Page Results'>\r\n                            <ActivePageTable />\r\n                        </GridItem>\r\n                    </div>\r\n                    <div key='console'>\r\n                        <GridItem header='Activity Log'>\r\n                            <ConsoleList />\r\n                        </GridItem>\r\n                    </div>\r\n                    <div key='metricsTable'>\r\n                        <GridItem header='Page Metrics'>\r\n                            <ActiveMetricsTable />\r\n                        </GridItem>\r\n                    </div>\r\n                    <div key='loadChart'>\r\n                        <GridItem header='Total Resource Loads'>\r\n                            <LoadChart />\r\n                        </GridItem>\r\n                    </div>\r\n                    <div key='requestChart'>\r\n                        <GridItem header='Average Resource Requests'>\r\n                            <RequestChart />\r\n                        </GridItem>\r\n                    </div>\r\n                </ResponsiveGridLayout>\r\n            </Container>\r\n        </>\r\n    );\r\n};\r\n","export const DefaultHistoryLayouts = {\r\n    // 12 columns\r\n    lg: [\r\n        { i: 'jobsTable', w: 12, h: 4, x: 0, y: 0, isBounded: true },\r\n        { i: 'pageTable', w: 12, h: 4, x: 0, y: 4, isBounded: true },\r\n        { i: 'metricsTable', w: 12, h: 4, x: 6, y: 8, isBounded: true },\r\n    ],\r\n    // 10 columns\r\n    md: [\r\n        { i: 'jobsTable', w: 10, h: 5, x: 0, y: 0, isBounded: true },\r\n        { i: 'pageTable', w: 10, h: 5, x: 0, y: 5, isBounded: true },\r\n        { i: 'metricsTable', w: 10, h: 5, x: 0, y: 10, isBounded: true },\r\n    ],\r\n    // 6 columns\r\n    sm: [\r\n        { i: 'jobsTable', w: 6, h: 5, x: 0, y: 0, isBounded: true },\r\n        { i: 'pageTable', w: 6, h: 5, x: 0, y: 5, isBounded: true },\r\n        { i: 'metricsTable', w: 6, h: 5, x: 0, y: 10, isBounded: true },\r\n    ],\r\n    // 4 columns\r\n    xs: [\r\n        { i: 'jobsTable', w: 4, h: 5, x: 0, y: 0, isBounded: true },\r\n        { i: 'pageTable', w: 4, h: 5, x: 0, y: 5, isBounded: true },\r\n        { i: 'metricsTable', w: 4, h: 5, x: 0, y: 10, isBounded: true },\r\n    ],\r\n    // 2 columns\r\n    xxs: [\r\n        { i: 'jobsTable', w: 2, h: 5, x: 0, y: 0, isBounded: true },\r\n        { i: 'pageTable', w: 2, h: 5, x: 0, y: 5, isBounded: true },\r\n        { i: 'metricsTable', w: 2, h: 5, x: 0, y: 10, isBounded: true },\r\n    ],\r\n};\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { runInAction } from 'mobx';\r\nimport { useStores } from './../../hooks/useStores';\r\n\r\n//we need to format some cells that are non-standard\r\nexport const EditableDisplayNameTableCell = observer(({ row }) => {\r\n    //get the job store for data\r\n    const { JobStore } = useStores();\r\n    //then we find the job using the row data id and update the name property\r\n    const jobId = row.original.id;\r\n    const jobIndex = JobStore.jobs.findIndex((job) => job.id === jobId);\r\n    const handleOnChange = (event) => {\r\n        //then we run the name change in action\r\n        runInAction(() => (JobStore.jobs[jobIndex].name = event.target.value));\r\n    };\r\n    return (\r\n        <input\r\n            value={JobStore.jobs[jobIndex].name}\r\n            //we do not want any of the row handler functions firing when we click on an editable cell\r\n            onClick={(event) => event.stopPropagation()}\r\n            //we need to handle the change\r\n            onChange={handleOnChange}\r\n        />\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { Checkbox } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react';\r\nimport { runInAction } from 'mobx';\r\nimport { useStores } from './../../hooks/useStores';\r\nimport { EditableDisplayNameTableCell } from './editableDisplayTableCell';\r\nimport { SemanticTable } from './../../components/tables/table';\r\n\r\nexport const JobsTable = observer(() => {\r\n    //get the job store for data\r\n    const { JobStore } = useStores();\r\n    //then we have the custom row click, which is already passed the row.original by table component\r\n    const handleRowClick = (row) => {\r\n        //then we find the job using the row data id\r\n        const jobId = row.id;\r\n        const jobIndex = JobStore.jobs.findIndex((job) => job.id === jobId);\r\n        runInAction(() => (JobStore.displayIndex = jobIndex));\r\n    };\r\n    const DateCell = ({ value }) => <div>{`${new Date(value).toLocaleString()}`}</div>;\r\n    const CheckboxCell = ({ value }) => <Checkbox disabled defaultChecked={value} />;\r\n    // columns are headers with the accessor, referring to the \"key\" in the data\r\n    const columns = [\r\n        //basic data\r\n        {\r\n            Header: 'Details',\r\n            columns: [\r\n                { Header: 'Name', accessor: 'name', Cell: EditableDisplayNameTableCell },\r\n                { Header: 'Date', accessor: 'updatedtAt', Cell: DateCell },\r\n                { Header: 'Browser', accessor: 'browserName' },\r\n                { Header: 'System', accessor: 'operatingSystem' },\r\n                { Header: 'Version', accessor: 'operatingSystemVersion' },\r\n            ],\r\n        },\r\n        //settings data\r\n        {\r\n            Header: 'Settings',\r\n            columns: [\r\n                { Header: 'Bandwidth (Mbps)', accessor: 'bandwidth' },\r\n                { Header: 'Page Iterations', accessor: 'pageIterations' },\r\n                { Header: 'Latency (ms)', accessor: 'latency' },\r\n                { Header: 'Cache', accessor: 'withCache', Cell: CheckboxCell },\r\n                { Header: 'Service Workers', accessor: 'withServiceWorker', Cell: CheckboxCell },\r\n            ],\r\n        },\r\n        //results data\r\n        {\r\n            Header: 'Results',\r\n            columns: [\r\n                { Header: 'Web Pages', accessor: 'pagesProcessed' },\r\n                { Header: 'Dom Loaded (ms)', accessor: 'dclAverage' },\r\n                { Header: 'Page Complete (ms)', accessor: 'completeAverage' },\r\n                { Header: 'Data Usage (MB)', accessor: 'dataUsageAverage' },\r\n                { Header: 'Headers (ms)', accessor: 'headerTimingsAverage' },\r\n            ],\r\n        },\r\n    ];\r\n    return (\r\n        <div className='internal-grid-content-single-row'>\r\n            <SemanticTable\r\n                headers={columns}\r\n                dataset={JobStore.jobTableData}\r\n                striped={true}\r\n                compact={true}\r\n                sortable={true}\r\n                selectable={true}\r\n                rowClick={handleRowClick}\r\n                mostRecent={true}\r\n                filename=''\r\n            />\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { runInAction } from 'mobx';\r\nimport { useStores } from '../../hooks/useStores';\r\nimport { useBrowser } from '../../hooks/useBrowser';\r\nimport { SemanticTable } from '../tables/table';\r\nimport { PlaceHolder } from '../placeHolder';\r\n\r\nexport const DisplayPageTable = observer(() => {\r\n    //get the settings to see if we have any saved layouts\r\n    const { JobStore, Settings } = useStores();\r\n    //get the activeJob, if not null, MUST CHECK NOT NULL AS ZERO INDEX POSSIBLE, otherwise the placeholder will do fine\r\n    const displayJob = JobStore.displayIndex !== null ? JobStore.jobs[JobStore.displayIndex] : JobStore.placeholderJob;\r\n    //get the browser details for the csv file name\r\n    const { Browser } = useBrowser();\r\n\r\n    //then we have the custom row click\r\n    const handleRowClick = (row) => {\r\n        //here we can use the row info to search our pages and then provide further information, such as showing the screenshot in the sidebar\r\n        console.log(row);\r\n        runInAction(() => {\r\n            Settings.pageDisplayIndex = displayJob.pages.findIndex((page) => page.url === row.url);\r\n            Settings.sidebar = 'showPageDetail';\r\n            Settings.showSidebar = true;\r\n        });\r\n    };\r\n\r\n    // columns are headers with the accessor, referring to the \"key\" in the data\r\n    const columns = [\r\n        { Header: 'Page Url', accessor: 'url' },\r\n        { Header: 'Dom Loaded (ms)', accessor: 'dclAverage' },\r\n        { Header: 'Page Complete (ms)', accessor: 'completeAverage' },\r\n        { Header: 'Data Usage (bytes)', accessor: 'dataUsageAverage' },\r\n        { Header: 'Headers (ms)', accessor: 'headerTimingsAverage' },\r\n        { Header: 'Image Load (bytes)', accessor: 'imageLoadAverage' },\r\n        { Header: 'Images', accessor: 'imageRequestsAverage' },\r\n        { Header: 'Video Load (bytes)', accessor: 'mediaLoadAverage' },\r\n        { Header: 'Videos', accessor: 'mediaRequestsAverage' },\r\n        { Header: 'Font Load (bytes)', accessor: 'fontLoadAverage' },\r\n        { Header: 'Fonts', accessor: 'fontRequestsAverage' },\r\n        { Header: 'JS Load (bytes)', accessor: 'scriptLoadAverage' },\r\n        { Header: 'Scripts', accessor: 'scriptRequestsAverage' },\r\n        { Header: 'CSS Load (bytes)', accessor: 'cssLoadAverage' },\r\n        { Header: 'Stylesheets', accessor: 'cssRequestsAverage' },\r\n    ];\r\n\r\n    return (\r\n        <div className='internal-grid-content-single-row'>\r\n            {/*if display index is not null, then show table, MUST CHECK NOT NULL AS ZERO INDEX POSSIBLE*/}\r\n            {JobStore.displayIndex !== null ? (\r\n                <SemanticTable\r\n                    headers={columns}\r\n                    dataset={displayJob.pageTableData}\r\n                    striped={true}\r\n                    compact={true}\r\n                    sortable={true}\r\n                    selectable={true}\r\n                    rowClick={handleRowClick}\r\n                    mostRecent={true}\r\n                    filename={`${Settings.toString}_${Browser.name}_${Browser.os}${Browser.os_version}`}\r\n                />\r\n            ) : (\r\n                <PlaceHolder iconName='arrow up' message='Click on job results to show page data' />\r\n            )}\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { runInAction } from 'mobx';\r\nimport { useStores } from '../../hooks/useStores';\r\nimport { useBrowser } from '../../hooks/useBrowser';\r\nimport { SemanticTable } from '../tables/table';\r\nimport { PlaceHolder } from '../placeHolder';\r\n\r\nexport const DisplayMetricsTable = observer(() => {\r\n    //get the settings to see if we have any saved layouts\r\n    const { JobStore, Settings } = useStores();\r\n    //get the activeJob, if not null, MUST CHECK NOT NULL AS ZERO INDEX POSSIBLE, otherwise the placeholder will do fine\r\n    const displayJob = JobStore.displayIndex !== null ? JobStore.jobs[JobStore.displayIndex] : JobStore.placeholderJob;\r\n    //get the browser details for the csv file name\r\n    const { Browser } = useBrowser();\r\n\r\n    //then we have the custom row click\r\n    const handleRowClick = (row) => {\r\n        //here we can use the row info to search our pages and then provide further information, such as showing the screenshot in the sidebar\r\n        console.log(row);\r\n        runInAction(() => {\r\n            Settings.pageDisplayIndex = displayJob.pages.findIndex((page) => page.url === row.url);\r\n            Settings.sidebar = 'showPageDetail';\r\n            Settings.showSidebar = true;\r\n        });\r\n    };\r\n\r\n    // columns are headers with the accessor, referring to the \"key\" in the data\r\n    const columns = [\r\n        { Header: 'Page Url', accessor: 'url' },\r\n        { Header: 'Documents', accessor: 'metricsDocumentsAverage' },\r\n        { Header: 'Resources', accessor: 'metricsResourcesAverage' },\r\n        { Header: 'Frames', accessor: 'metricsFramesAverage' },\r\n        { Header: 'Advertising Frames', accessor: 'metricsAdvertisingFramesAverage' },\r\n        { Header: 'Used Memory (bytes)', accessor: 'metricsUsedHeapAverage' },\r\n        { Header: 'Total Memory (bytes)', accessor: 'metricsTotalHeapAverage' },\r\n    ];\r\n\r\n    return (\r\n        <div className='internal-grid-content-single-row'>\r\n            {/*if display index is not null, then show table, MUST CHECK NOT NULL AS ZERO INDEX POSSIBLE*/}\r\n            {JobStore.displayIndex !== null ? (\r\n                <SemanticTable\r\n                    headers={columns}\r\n                    dataset={displayJob.pageMetricsTableData}\r\n                    striped={true}\r\n                    compact={true}\r\n                    sortable={true}\r\n                    selectable={true}\r\n                    rowClick={handleRowClick}\r\n                    mostRecent={true}\r\n                    filename={`${Settings.toString}_${Browser.name}_${Browser.os}${Browser.os_version}`}\r\n                />\r\n            ) : (\r\n                <PlaceHolder iconName='arrow up' message='Click on job results to show page data' />\r\n            )}\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { PageTitle } from '../../components/pageTitle';\r\nimport { observer } from 'mobx-react';\r\nimport { useStores } from '../../hooks/useStores';\r\n\r\nexport const HistoryTitle = observer(() => {\r\n    //get the settings to see if we have any saved layouts\r\n    const { JobStore } = useStores();\r\n    //get the activeJob, if not null, MUST CHECK NOT NULL AS ZERO INDEX POSSIBLE, otherwise the placeholder will do fine\r\n    const subTitle =\r\n        JobStore.displayIndex !== null\r\n            ? `Viewing job: ${JobStore.jobs[JobStore.displayIndex].name}`\r\n            : 'Add names and view saved jobs';\r\n    return (\r\n        <div>\r\n            <PageTitle title='History' subtitle={subTitle} />\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport { runInAction } from 'mobx';\r\nimport { Responsive, WidthProvider } from 'react-grid-layout';\r\nimport { useStores } from './../hooks/useStores';\r\nimport { DefaultHistoryLayouts } from './../components/history/historyLayout';\r\nimport { GridItem } from './../components/gridItem';\r\nimport { JobsTable } from '../components/history/jobsTable';\r\nimport { DisplayPageTable } from '../components/history/displayPageTable';\r\nimport { DisplayMetricsTable } from '../components/history/displayMetricsTable';\r\nimport { HistoryTitle } from '../components/history/historyTitle';\r\n\r\n// <ResponsiveReactGridLayout> takes width to calculate positions on drag events.\r\n// WidthProvider can be used to automatically determine width upon initialization and window resize events.\r\nconst ResponsiveGridLayout = WidthProvider(Responsive);\r\n\r\nexport const History = () => {\r\n    const { Settings } = useStores();\r\n    //then we need to have a save action on the layout change\r\n    const handleLayoutChange = (currentLayout, allLayouts) => {\r\n        console.log(currentLayout);\r\n        runInAction(() => (Settings.historyLayouts = allLayouts));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Container text textAlign='center'>\r\n                <HistoryTitle />\r\n            </Container>\r\n            <Container fluid>\r\n                <ResponsiveGridLayout\r\n                    className='layout'\r\n                    draggableHandle='.draggableHandle'\r\n                    layouts={\r\n                        Object.keys(Settings.historyLayouts).length ? Settings.historyLayouts : DefaultHistoryLayouts\r\n                    }\r\n                    breakpoints={{\r\n                        lg: 1200,\r\n                        md: 996,\r\n                        sm: 768,\r\n                        xs: 480,\r\n                        xxs: 0,\r\n                    }}\r\n                    cols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}\r\n                    margin={[10, 10]}\r\n                    containerPadding={[10, 10]}\r\n                    onLayoutChange={handleLayoutChange}\r\n                >\r\n                    <div key='jobsTable'>\r\n                        <GridItem header='Job Results'>\r\n                            <JobsTable />\r\n                        </GridItem>\r\n                    </div>\r\n                    <div key='pageTable'>\r\n                        <GridItem header='Page Results'>\r\n                            <DisplayPageTable />\r\n                        </GridItem>\r\n                    </div>\r\n                    <div key='metricsTable'>\r\n                        <GridItem header='Page Metrics'>\r\n                            <DisplayMetricsTable />\r\n                        </GridItem>\r\n                    </div>\r\n                </ResponsiveGridLayout>\r\n            </Container>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\nimport { Sidebar, Container, Segment } from 'semantic-ui-react';\nimport { Switch, Route } from 'react-router-dom';\nimport { runInAction } from 'mobx';\nimport { observer } from 'mobx-react';\nimport { useStores } from './hooks/useStores';\nimport { Navigation } from './components/navigation';\nimport { SidebarContent } from './components/sidebarContent';\nimport { Home } from './pages/home';\nimport { SettingsPage } from './pages/settings';\nimport { Results } from './pages/results';\nimport { History } from './pages/history';\n\nexport const App = observer(() => {\n    const { Settings } = useStores();\n    return (\n        <div className='appContainer'>\n            <Navigation />\n\n            <Sidebar.Pushable as={Container} fluid className='pageContainer'>\n                <Sidebar\n                    as={Segment}\n                    animation='overlay'\n                    onHide={() => runInAction(() => (Settings.showSidebar = false))}\n                    vertical\n                    direction='right'\n                    visible={Settings.showSidebar}\n                    width='very wide'\n                    style={{ padding: '0px' }}\n                >\n                    <SidebarContent />\n                </Sidebar>\n\n                <Sidebar.Pusher>\n                    <Switch>\n                        <Route path='/index.html'>\n                            <Home />\n                        </Route>\n                        <Route path='/settings'>\n                            <SettingsPage />\n                        </Route>\n                        <Route path='/results'>\n                            <Results />\n                        </Route>\n                        <Route path='/history'>\n                            <History />\n                        </Route>\n                        <Route path='*'>\n                            <Home />\n                        </Route>\n                    </Switch>\n                </Sidebar.Pusher>\n            </Sidebar.Pushable>\n        </div>\n    );\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { MemoryRouter as Router } from 'react-router-dom';\nimport { App } from './App';\n\n//the easy way to include semantic ui\nimport 'semantic-ui-css/semantic.min.css';\n//import the our own and the semantic ui css\nimport './index.css';\n//grab the grid layout css\nimport '../node_modules/react-grid-layout/css/styles.css';\nimport '../node_modules/react-resizable/css/styles.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router>\n            <App />\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}